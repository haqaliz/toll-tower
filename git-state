commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
Author: Ali Alizade Haqiqi <aliz@x-matik.com>
Date:   Sun Jul 11 18:48:16 2021 +0430

    ready to deploy
    
    Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>

.sequelizerc
Dockerfile
do
docker-compose.yml
env/dev
env/env
git-state
package-lock.json
package.json
src/config/assets.js
src/config/assets.json
src/config/config.json
src/config/db.js
src/config/index.js
src/env.js
src/index.js
src/integrations/foundation/index.js
src/integrations/foundation/methods.js
src/integrations/foundation/methods.json
src/models/index.js
src/utils.js

===== diff =====
diff --git a/do b/do
index b7c5ae6..9b2489b 100755
--- a/do
+++ b/do
@@ -59,18 +59,16 @@ DOCKER_REGISTRY = 'registry.bloomo.app'
 DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
 DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
 
+ENV_PATH = '/root/bloomo/env'
 STATIC_PATH = '/bloomo/static'
 POSTGRES_DATA_PATH = '/mnt/postgres-data'
 POSTGRES_PW = 'QeOtLqfzR8Su$'
 
 if args.env == 'dev':
-    ENV_PATH = '.env'
     ORIGIN = 'http://localhost:8004'
 elif args.env == 'stag':
-    ENV_PATH = '.env.stag'
     HOSTNAME = 'staging.bloomo.app'
 elif args.env == 'prod':
-    ENV_PATH = '.env.prod'
     HOSTNAME = 'bloomo.app'
 
 if args.env in ['stag', 'prod']:
@@ -264,7 +262,7 @@ if args.full_dev_setup:
     invoke('npm ci')
 
 if args.dotenv_dev or args.full_dev_setup:
-    shutil.copy('env/dev', 'env/env')
+   shutil.copy('env/dev', 'env/env')
 
 if args.db_drop or args.db_fresh:
     psqlc(f'DROP DATABASE {dotenv_get("DB")}')
@@ -304,8 +302,7 @@ if args.deploy_staging or args.deploy_production:
     for i in [
         'do',
         'docker-compose.yml',
-        'git-state',
-        ENV_PATH
+        'git-state'
     ]:
         cp_to_target(i, 'bloomo')
     invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
diff --git a/docker-compose.yml b/docker-compose.yml
index 5f2162e..7fe5c50 100644
--- a/docker-compose.yml
+++ b/docker-compose.yml
@@ -18,8 +18,8 @@ services:
     depends_on:
       - db
     volumes:
-      - ${ENV_PATH}:/portal2-backend/env:ro
-      - ${STATIC_PATH}:/portal2-backend/static:ro
+      - ${ENV_PATH}:/bloomo/env:ro
+      - ${STATIC_PATH}:/bloomo/static:ro
     restart: always
     ports:
       - 8004:8004
diff --git a/git-state b/git-state
index af62c51..38e8e88 100644
--- a/git-state
+++ b/git-state
@@ -1,424 +1,2999 @@
-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
+commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
 Author: Ali Alizade Haqiqi <aliz@x-matik.com>
-Date:   Sun Jul 4 02:40:38 2021 +0430
+Date:   Sun Jul 11 18:48:16 2021 +0430
 
-    power ups feature
+    ready to deploy
     
     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
 
+.sequelizerc
+Dockerfile
+do
+docker-compose.yml
+env/dev
+env/env
+git-state
+package-lock.json
+package.json
+src/config/assets.js
+src/config/assets.json
+src/config/config.json
+src/config/db.js
+src/config/index.js
+src/env.js
 src/index.js
 src/integrations/foundation/index.js
-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
-src/models/artworks.js
+src/integrations/foundation/methods.js
+src/integrations/foundation/methods.json
+src/models/index.js
 src/utils.js
 
 ===== diff =====
-diff --git a/.sequelizerc b/.sequelizerc
-index 233b747..425db6b 100644
---- a/.sequelizerc
-+++ b/.sequelizerc
-@@ -1,7 +1,7 @@
- const path = require('path');
- 
- module.exports = {
--  config: path.resolve('src', 'config', 'config.json'),
-+  config: path.resolve('src', 'config', 'config.js'),
-   'models-path': path.resolve('src', 'models'),
-   'migrations-path': path.resolve('src', 'migrations'),
- };
 diff --git a/do b/do
-index a927286..75d54d3 100755
+index b7c5ae6..9b2489b 100755
 --- a/do
 +++ b/do
-@@ -2,24 +2,79 @@
- 
- #===== imports =====#
- import argparse
-+import collections
- import copy
- import datetime
-+import getpass
- import glob
-+import hashlib
-+import json
-+import math
- import os
-+import pprint
-+import random
- import re
-+import shutil
- import subprocess
- import sys
-+import time
+@@ -59,18 +59,16 @@ DOCKER_REGISTRY = 'registry.bloomo.app'
+ DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
+ DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
  
- #===== args =====#
- parser = argparse.ArgumentParser()
-+# setup
-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
-+parser.add_argument('--db-create', '--dbc', action='store_true')
-+parser.add_argument('--db-drop', '--dbd', action='store_true')
-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
-+
-+# development
- parser.add_argument('--run', '-r', action='store_true')
- parser.add_argument('--sequelize-cli', '--seq', '-s')
- 
-+# deploy
-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
-+parser.add_argument('--deploy-skip-migrate', action='store_true')
-+
-+# config
-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
-+
- args = parser.parse_args()
++ENV_PATH = '/root/bloomo/env'
+ STATIC_PATH = '/bloomo/static'
+ POSTGRES_DATA_PATH = '/mnt/postgres-data'
+ POSTGRES_PW = 'QeOtLqfzR8Su$'
  
-+if args.deploy_staging:
-+    args.env = 'stag'
-+elif args.deploy_production:
-+    args.env = 'prod'
-+
- #===== consts =====#
- DIR = os.path.dirname(os.path.realpath(__file__))
+ if args.env == 'dev':
+-    ENV_PATH = '.env'
+     ORIGIN = 'http://localhost:8004'
+ elif args.env == 'stag':
+-    ENV_PATH = '.env.stag'
+     HOSTNAME = 'staging.bloomo.app'
+ elif args.env == 'prod':
+-    ENV_PATH = '.env.prod'
+     HOSTNAME = 'bloomo.app'
  
-+DOCKER_REGISTRY = 'registry.bloomo.app'
-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
-+
-+STATIC_PATH = '/bloomo/static'
-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
-+
-+if args.env == 'dev':
-+    ENV_PATH = '.env'
-+    ORIGIN = 'http://localhost:8004'
-+elif args.env == 'stag':
-+    ENV_PATH = '.env.stag'
-+    HOSTNAME = 'staging.bloomo.app'
-+elif args.env == 'prod':
-+    ENV_PATH = '.env.prod'
-+    HOSTNAME = 'bloomo.app'
-+
-+if args.env in ['stag', 'prod']:
-+    ORIGIN = f'https://{HOSTNAME}'
-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
-+
- #===== setup =====#
- os.chdir(DIR)
+ if args.env in ['stag', 'prod']:
+@@ -264,7 +262,7 @@ if args.full_dev_setup:
+     invoke('npm ci')
  
-@@ -27,6 +82,71 @@ os.chdir(DIR)
- def blue(text):
-     return '\x1b[34m' + text + '\x1b[0m'
+ if args.dotenv_dev or args.full_dev_setup:
+-    shutil.copy('env/dev', 'env/env')
++   shutil.copy('env/dev', 'env/env')
  
-+def print_styled(string, end=None, style=None):
-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
-+    def replace(match):
-+        if match.group(2) == '/': return match.group()
-+        if match.group(1) == '/': return '\x1b[0m'
-+        split = match.group(2).split('-')
-+        while len(split) < 2: split.append('none')
-+        color = split[0]
-+        background = split[1]
-+        decorations = split[2:]
-+        if color.startswith('#'):
-+            color = f'\x1b[38;5;{color[1:]}m'
-+        else: color = {
-+            'black': '\x1b[30m',
-+            'red': '\x1b[31m',
-+            'green': '\x1b[32m',
-+            'yellow': '\x1b[33m',
-+            'blue': '\x1b[34m',
-+            'magenta': '\x1b[35m',
-+            'cyan': '\x1b[36m',
-+            'white': '\x1b[37m',
-+            'lightblack': '\x1b[30;1m',
-+            'lightred': '\x1b[31;1m',
-+            'lightyellow': '\x1b[33;1m',
-+            'lightgreen': '\x1b[32;1m',
-+            'lightblue': '\x1b[34;1m',
-+            'lightmagenta': '\x1b[35;1m',
-+            'lightcyan': '\x1b[36;1m',
-+            'lightwhite': '\x1b[37;1m',
-+            'none': '',
-+        }[color]
-+        if background.startswith('#'):
-+            background = f'\x1b[48;5;{background[1:]}m'
-+        else: background = {
-+            'black': '\x1b[40m',
-+            'red': '\x1b[41m',
-+            'green': '\x1b[42m',
-+            'yellow': '\x1b[43m',
-+            'blue': '\x1b[44m',
-+            'magenta': '\x1b[45m',
-+            'cyan': '\x1b[46m',
-+            'white': '\x1b[47m',
-+            'lightblack': '\x1b[40;1m',
-+            'lightred': '\x1b[41;1m',
-+            'lightyellow': '\x1b[43;1m',
-+            'lightgreen': '\x1b[42;1m',
-+            'lightblue': '\x1b[44;1m',
-+            'lightmagenta': '\x1b[45;1m',
-+            'lightcyan': '\x1b[46;1m',
-+            'lightwhite': '\x1b[47;1m',
-+            'none': '',
-+        }[background]
-+        decorations = ''.join([
-+            {
-+                'bold': '\x1b[1m',
-+                'underlined': '\x1b[4m',
-+                'reversed': '\x1b[7m',
-+                'none': '',
-+            }[i]
-+            for i in decorations
-+        ])
-+        return color + background + decorations
-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
-+    return re.sub('<(/?)(.*?)>', '', string)
-+
- def timestamp():
-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
+ if args.db_drop or args.db_fresh:
+     psqlc(f'DROP DATABASE {dotenv_get("DB")}')
+@@ -304,8 +302,7 @@ if args.deploy_staging or args.deploy_production:
+     for i in [
+         'do',
+         'docker-compose.yml',
+-        'git-state',
+-        ENV_PATH
++        'git-state'
+     ]:
+         cp_to_target(i, 'bloomo')
+     invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+diff --git a/docker-compose.yml b/docker-compose.yml
+index 5f2162e..7fe5c50 100644
+--- a/docker-compose.yml
++++ b/docker-compose.yml
+@@ -18,8 +18,8 @@ services:
+     depends_on:
+       - db
+     volumes:
+-      - ${ENV_PATH}:/portal2-backend/env:ro
+-      - ${STATIC_PATH}:/portal2-backend/static:ro
++      - ${ENV_PATH}:/bloomo/env:ro
++      - ${STATIC_PATH}:/bloomo/static:ro
+     restart: always
+     ports:
+       - 8004:8004
+diff --git a/git-state b/git-state
+index af62c51..7280e73 100644
+--- a/git-state
++++ b/git-state
+@@ -1,424 +1,2404 @@
+-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
++commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
+ Author: Ali Alizade Haqiqi <aliz@x-matik.com>
+-Date:   Sun Jul 4 02:40:38 2021 +0430
++Date:   Sun Jul 11 18:48:16 2021 +0430
  
-@@ -44,15 +164,16 @@ def invoke(
-         print(blue('-'*40))
-         print(timestamp())
-         print(os.getcwd()+'$', end=' ')
--        for i, v in enumerate(args):
--            if re.search(r'\s', v):
--                v = v.replace("'", """ '"'"' """.strip())
--                v = f"'{v}'"
--            if i != len(args)-1:
--                end = ' '
--            else:
--                end = ';\n'
--            print(v, end=end)
-+        if any([re.search(r'\s', i) for i in args]):
-+            print()
-+            for i in args: print(f'\t{i} \\')
-+        else:
-+            for i, v in enumerate(args):
-+                if i != len(args)-1:
-+                    end = ' '
-+                else:
-+                    end = ';\n'
-+                print(v, end=end)
-         if kwargs: print(kwargs)
-         if popen: print('popen')
-         print()
-@@ -67,15 +188,131 @@ def invoke(
-         if stdout: kwargs['capture_output'] = True
-         result = subprocess.run(args, **kwargs)
-         if stdout:
--            result = result.stdout.decode('utf-8').strip()
-+            result = result.stdout.decode('utf-8')
-+            if stdout != 'exact': result = result.strip()
-         return result
+-    power ups feature
++    ready to deploy
+     
+     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
  
-+def invoke_target(*args, **kwargs):
-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
-+
-+def cp_to_target(src, dst, quiet=False):
-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
-+
-+def psqlc(command, db='', quiet=False, use_file=False):
-+    if not quiet: print(command)
-+    if use_file:
-+        with open('command.sql', 'w') as file: file.write(command)
-+    invocation = ['su', 'postgres', '-c']
-+    if use_file:
-+        invocation.append(f'psql {db} -f command.sql')
-+    else:
-+        invocation.append(f'psql {db} -c "{command}"')
-+    if getpass.getuser() != 'root':
-+        invocation.insert(0, 'sudo')
-+    invoke(*invocation, quiet=quiet)
-+
-+def psqlc_target(command, options='', quiet=False, use_file=False):
-+    if not quiet: print(command)
-+    if args.db_dry_sql: return
-+    if use_file:
-+        with open('command.sql', 'w') as file: file.write(command)
-+        cp_to_target('command.sql', '.', quiet=True)
-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
-+    separator = f'({UUID})'
-+    result = invoke_target(
-+        ' '.join([
-+            'docker exec portal2-backend-db',
-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
-+                    '-f command.sql' if use_file else f'-c "{command}"',
-+                    '-t',
-+                    '--no-align',
-+                    f'-F "{separator}"',
-+                    options,
-+        ]),
-+        stdout=True,
-+        quiet=True,
-+    )
-+    return [line.split(separator) for line in result.splitlines()]
-+
-+def dotenv_get(var):
-+    if os.environ[var]:
-+        return os.environ[var]
-+    with open(ENV_PATH) as env:
-+        lines = env.readlines()
-+    for line in lines:
-+        if line.startswith(var+'='):
-+            return line[len(var)+1:].strip()
-+
-+def git_state():
-+    diff = invoke('git diff', stdout=True)
-+    diff_cached = invoke('git diff --cached', stdout=True)
-+    with open('git-state', 'w') as git_state:
-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
-+        if diff:
-+            git_state.write('\n===== diff =====\n')
-+            git_state.write(diff+'\n')
-+        if diff_cached:
-+            git_state.write('\n===== diff --cached =====\n')
-+            git_state.write(diff_cached+'\n')
-+
- #===== main =====#
- if len(sys.argv) == 1:
-     parser.print_help()
-     sys.exit()
++.sequelizerc
++Dockerfile
++do
++docker-compose.yml
++env/dev
++env/env
++git-state
++package-lock.json
++package.json
++src/config/assets.js
++src/config/assets.json
++src/config/config.json
++src/config/db.js
++src/config/index.js
++src/env.js
+ src/index.js
+ src/integrations/foundation/index.js
+-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
+-src/models/artworks.js
++src/integrations/foundation/methods.js
++src/integrations/foundation/methods.json
++src/models/index.js
+ src/utils.js
  
-+if args.full_dev_setup:
-+    invoke('npm ci')
-+
-+if args.db_drop or args.db_fresh:
-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
-+
-+if args.db_user_drop or args.db_fresh:
-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
-+
-+if args.db_create or args.full_dev_setup or args.db_fresh:
-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
-+
-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
-+    db_user = dotenv_get('DB_USER')
-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
-+
-+if args.full_dev_setup or args.db_fresh:
-+    invoke('npx sequelize-cli db:migrate')
-+
- if args.run:
-     invoke(f'npx nodemon src/index.js')
--elif args.sequelize_cli:
-+
-+if args.sequelize_cli:
-     invoke(f'npx sequelize-cli')
-+
-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
-+    git_state()
-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
-+    invoke(f'docker build -t {DOCKER_TAG} .')
-+
-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
-+    invoke(f'docker push {DOCKER_TAG}')
-+
-+if args.deploy_staging or args.deploy_production:
-+    invoke_target('mkdir bloomo', check=False)
-+    git_state()
-+    for i in [
-+        'do',
-+        'docker-compose.yml',
-+        'git-state',
-+        ENV_PATH
-+    ]:
-+        cp_to_target(i, 'bloomo')
-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
-+    invoke_target(f'docker pull {DOCKER_TAG}')
-+    invoke_target(' '.join([
-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
-+        f'DOCKER_TAG={DOCKER_TAG}',
-+        f'STATIC_PATH={STATIC_PATH}',
-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
-+    ]))
-+    if not args.deploy_skip_migrate:
-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
-+    invoke_target('docker system prune --force')
-diff --git a/src/config/config.json b/src/config/config.json
-deleted file mode 100644
-index 3b6981b..0000000
---- a/src/config/config.json
-+++ /dev/null
-@@ -1,24 +0,0 @@
--{
--  "development": {
--    "username": "u_bloom",
--    "password": "king_1374",
--    "database": "bloom",
--    "host": "localhost",
--    "dialect": "postgres",
--    "define": {
--      "createdAt": "created_at",
--      "updatedAt": "updated_at"
--    }
--  },
--  "production": {
--    "username": "u-bloom",
--    "password": "QeOtLqfzR8Su$",
--    "database": "bloom",
--    "host": "localhost",
--    "dialect": "postgres",
--    "define": {
--      "createdAt": "created_at",
--      "updatedAt": "updated_at"
--    }
--  }
--}
+ ===== diff =====
+-diff --git a/.sequelizerc b/.sequelizerc
+-index 233b747..425db6b 100644
+---- a/.sequelizerc
+-+++ b/.sequelizerc
+-@@ -1,7 +1,7 @@
+- const path = require('path');
+- 
+- module.exports = {
+--  config: path.resolve('src', 'config', 'config.json'),
+-+  config: path.resolve('src', 'config', 'config.js'),
+-   'models-path': path.resolve('src', 'models'),
+-   'migrations-path': path.resolve('src', 'migrations'),
+- };
+ diff --git a/do b/do
+-index a927286..75d54d3 100755
++index b7c5ae6..40c1051 100755
+ --- a/do
+ +++ b/do
+-@@ -2,24 +2,79 @@
+- 
+- #===== imports =====#
+- import argparse
+-+import collections
+- import copy
+- import datetime
+-+import getpass
+- import glob
+-+import hashlib
+-+import json
+-+import math
+- import os
+-+import pprint
+-+import random
+- import re
+-+import shutil
+- import subprocess
+- import sys
+-+import time
+- 
+- #===== args =====#
+- parser = argparse.ArgumentParser()
+-+# setup
+-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
+-+parser.add_argument('--db-create', '--dbc', action='store_true')
+-+parser.add_argument('--db-drop', '--dbd', action='store_true')
+-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
+-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
+-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
+-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
+-+
+-+# development
+- parser.add_argument('--run', '-r', action='store_true')
+- parser.add_argument('--sequelize-cli', '--seq', '-s')
+- 
+-+# deploy
+-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
+-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
+-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
+-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
+-+parser.add_argument('--deploy-skip-migrate', action='store_true')
+-+
+-+# config
+-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
+-+
+- args = parser.parse_args()
+- 
+-+if args.deploy_staging:
+-+    args.env = 'stag'
+-+elif args.deploy_production:
+-+    args.env = 'prod'
+-+
+- #===== consts =====#
+- DIR = os.path.dirname(os.path.realpath(__file__))
+- 
+-+DOCKER_REGISTRY = 'registry.bloomo.app'
+-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
+-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
+-+
+-+STATIC_PATH = '/bloomo/static'
+-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
+-+
+-+if args.env == 'dev':
+-+    ENV_PATH = '.env'
+-+    ORIGIN = 'http://localhost:8004'
+-+elif args.env == 'stag':
+-+    ENV_PATH = '.env.stag'
+-+    HOSTNAME = 'staging.bloomo.app'
+-+elif args.env == 'prod':
+-+    ENV_PATH = '.env.prod'
+-+    HOSTNAME = 'bloomo.app'
+-+
+-+if args.env in ['stag', 'prod']:
+-+    ORIGIN = f'https://{HOSTNAME}'
+-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
+-+
+- #===== setup =====#
+- os.chdir(DIR)
+- 
+-@@ -27,6 +82,71 @@ os.chdir(DIR)
+- def blue(text):
+-     return '\x1b[34m' + text + '\x1b[0m'
+- 
+-+def print_styled(string, end=None, style=None):
+-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
+-+    def replace(match):
+-+        if match.group(2) == '/': return match.group()
+-+        if match.group(1) == '/': return '\x1b[0m'
+-+        split = match.group(2).split('-')
+-+        while len(split) < 2: split.append('none')
+-+        color = split[0]
+-+        background = split[1]
+-+        decorations = split[2:]
+-+        if color.startswith('#'):
+-+            color = f'\x1b[38;5;{color[1:]}m'
+-+        else: color = {
+-+            'black': '\x1b[30m',
+-+            'red': '\x1b[31m',
+-+            'green': '\x1b[32m',
+-+            'yellow': '\x1b[33m',
+-+            'blue': '\x1b[34m',
+-+            'magenta': '\x1b[35m',
+-+            'cyan': '\x1b[36m',
+-+            'white': '\x1b[37m',
+-+            'lightblack': '\x1b[30;1m',
+-+            'lightred': '\x1b[31;1m',
+-+            'lightyellow': '\x1b[33;1m',
+-+            'lightgreen': '\x1b[32;1m',
+-+            'lightblue': '\x1b[34;1m',
+-+            'lightmagenta': '\x1b[35;1m',
+-+            'lightcyan': '\x1b[36;1m',
+-+            'lightwhite': '\x1b[37;1m',
+-+            'none': '',
+-+        }[color]
+-+        if background.startswith('#'):
+-+            background = f'\x1b[48;5;{background[1:]}m'
+-+        else: background = {
+-+            'black': '\x1b[40m',
+-+            'red': '\x1b[41m',
+-+            'green': '\x1b[42m',
+-+            'yellow': '\x1b[43m',
+-+            'blue': '\x1b[44m',
+-+            'magenta': '\x1b[45m',
+-+            'cyan': '\x1b[46m',
+-+            'white': '\x1b[47m',
+-+            'lightblack': '\x1b[40;1m',
+-+            'lightred': '\x1b[41;1m',
+-+            'lightyellow': '\x1b[43;1m',
+-+            'lightgreen': '\x1b[42;1m',
+-+            'lightblue': '\x1b[44;1m',
+-+            'lightmagenta': '\x1b[45;1m',
+-+            'lightcyan': '\x1b[46;1m',
+-+            'lightwhite': '\x1b[47;1m',
+-+            'none': '',
+-+        }[background]
+-+        decorations = ''.join([
+-+            {
+-+                'bold': '\x1b[1m',
+-+                'underlined': '\x1b[4m',
+-+                'reversed': '\x1b[7m',
+-+                'none': '',
+-+            }[i]
+-+            for i in decorations
+-+        ])
+-+        return color + background + decorations
+-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
+-+    return re.sub('<(/?)(.*?)>', '', string)
+-+
+- def timestamp():
+-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
+- 
+-@@ -44,15 +164,16 @@ def invoke(
+-         print(blue('-'*40))
+-         print(timestamp())
+-         print(os.getcwd()+'$', end=' ')
+--        for i, v in enumerate(args):
+--            if re.search(r'\s', v):
+--                v = v.replace("'", """ '"'"' """.strip())
+--                v = f"'{v}'"
+--            if i != len(args)-1:
+--                end = ' '
+--            else:
+--                end = ';\n'
+--            print(v, end=end)
+-+        if any([re.search(r'\s', i) for i in args]):
+-+            print()
+-+            for i in args: print(f'\t{i} \\')
+-+        else:
+-+            for i, v in enumerate(args):
+-+                if i != len(args)-1:
+-+                    end = ' '
+-+                else:
+-+                    end = ';\n'
+-+                print(v, end=end)
+-         if kwargs: print(kwargs)
+-         if popen: print('popen')
+-         print()
+-@@ -67,15 +188,131 @@ def invoke(
+-         if stdout: kwargs['capture_output'] = True
+-         result = subprocess.run(args, **kwargs)
+-         if stdout:
+--            result = result.stdout.decode('utf-8').strip()
+-+            result = result.stdout.decode('utf-8')
+-+            if stdout != 'exact': result = result.strip()
+-         return result
++@@ -59,18 +59,16 @@ DOCKER_REGISTRY = 'registry.bloomo.app'
++ DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
++ DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
+  
+-+def invoke_target(*args, **kwargs):
+-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
+-+
+-+def cp_to_target(src, dst, quiet=False):
+-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
+-+
+-+def psqlc(command, db='', quiet=False, use_file=False):
+-+    if not quiet: print(command)
+-+    if use_file:
+-+        with open('command.sql', 'w') as file: file.write(command)
+-+    invocation = ['su', 'postgres', '-c']
+-+    if use_file:
+-+        invocation.append(f'psql {db} -f command.sql')
+-+    else:
+-+        invocation.append(f'psql {db} -c "{command}"')
+-+    if getpass.getuser() != 'root':
+-+        invocation.insert(0, 'sudo')
+-+    invoke(*invocation, quiet=quiet)
+-+
+-+def psqlc_target(command, options='', quiet=False, use_file=False):
+-+    if not quiet: print(command)
+-+    if args.db_dry_sql: return
+-+    if use_file:
+-+        with open('command.sql', 'w') as file: file.write(command)
+-+        cp_to_target('command.sql', '.', quiet=True)
+-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
+-+    separator = f'({UUID})'
+-+    result = invoke_target(
+-+        ' '.join([
+-+            'docker exec portal2-backend-db',
+-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
+-+                    '-f command.sql' if use_file else f'-c "{command}"',
+-+                    '-t',
+-+                    '--no-align',
+-+                    f'-F "{separator}"',
+-+                    options,
+-+        ]),
+-+        stdout=True,
+-+        quiet=True,
+-+    )
+-+    return [line.split(separator) for line in result.splitlines()]
+-+
+-+def dotenv_get(var):
+-+    if os.environ[var]:
+-+        return os.environ[var]
+-+    with open(ENV_PATH) as env:
+-+        lines = env.readlines()
+-+    for line in lines:
+-+        if line.startswith(var+'='):
+-+            return line[len(var)+1:].strip()
+-+
+-+def git_state():
+-+    diff = invoke('git diff', stdout=True)
+-+    diff_cached = invoke('git diff --cached', stdout=True)
+-+    with open('git-state', 'w') as git_state:
+-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
+-+        if diff:
+-+            git_state.write('\n===== diff =====\n')
+-+            git_state.write(diff+'\n')
+-+        if diff_cached:
+-+            git_state.write('\n===== diff --cached =====\n')
+-+            git_state.write(diff_cached+'\n')
+-+
+- #===== main =====#
+- if len(sys.argv) == 1:
+-     parser.print_help()
+-     sys.exit()
+++ENV_PATH = '/root/bloomo/env'
++ STATIC_PATH = '/bloomo/static'
++ POSTGRES_DATA_PATH = '/mnt/postgres-data'
++ POSTGRES_PW = 'QeOtLqfzR8Su$'
+  
+-+if args.full_dev_setup:
+-+    invoke('npm ci')
+-+
+-+if args.db_drop or args.db_fresh:
+-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
+-+
+-+if args.db_user_drop or args.db_fresh:
+-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
+-+
+-+if args.db_create or args.full_dev_setup or args.db_fresh:
+-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
+-+
+-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
+-+    db_user = dotenv_get('DB_USER')
+-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
+-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
+-+
+-+if args.full_dev_setup or args.db_fresh:
+-+    invoke('npx sequelize-cli db:migrate')
+-+
+- if args.run:
+-     invoke(f'npx nodemon src/index.js')
+--elif args.sequelize_cli:
+-+
+-+if args.sequelize_cli:
+-     invoke(f'npx sequelize-cli')
+-+
+-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
+-+    git_state()
+-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
+-+    invoke(f'docker build -t {DOCKER_TAG} .')
+-+
+-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
+-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+-+    invoke(f'docker push {DOCKER_TAG}')
+-+
+-+if args.deploy_staging or args.deploy_production:
+-+    invoke_target('mkdir bloomo', check=False)
+-+    git_state()
+-+    for i in [
+-+        'do',
+-+        'docker-compose.yml',
+-+        'git-state',
+-+        ENV_PATH
+-+    ]:
+-+        cp_to_target(i, 'bloomo')
+-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+-+    invoke_target(f'docker pull {DOCKER_TAG}')
+-+    invoke_target(' '.join([
+-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
+-+        f'DOCKER_TAG={DOCKER_TAG}',
+-+        f'STATIC_PATH={STATIC_PATH}',
+-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
+-+    ]))
+-+    if not args.deploy_skip_migrate:
+-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
+-+    invoke_target('docker system prune --force')
+-diff --git a/src/config/config.json b/src/config/config.json
+-deleted file mode 100644
+-index 3b6981b..0000000
+---- a/src/config/config.json
+-+++ /dev/null
+-@@ -1,24 +0,0 @@
+--{
+--  "development": {
+--    "username": "u_bloom",
+--    "password": "king_1374",
+--    "database": "bloom",
+--    "host": "localhost",
+--    "dialect": "postgres",
+--    "define": {
+--      "createdAt": "created_at",
+--      "updatedAt": "updated_at"
+--    }
+--  },
+--  "production": {
+--    "username": "u-bloom",
+--    "password": "QeOtLqfzR8Su$",
+--    "database": "bloom",
+--    "host": "localhost",
+--    "dialect": "postgres",
+--    "define": {
+--      "createdAt": "created_at",
+--      "updatedAt": "updated_at"
+--    }
+--  }
+--}
+-diff --git a/src/index.js b/src/index.js
+-index 0b4526f..b7ab55f 100644
+---- a/src/index.js
+-+++ b/src/index.js
+-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
+- const ASSETS = require('./config/assets.json');
++ if args.env == 'dev':
++-    ENV_PATH = '.env'
++     ORIGIN = 'http://localhost:8004'
++ elif args.env == 'stag':
++-    ENV_PATH = '.env.stag'
++     HOSTNAME = 'staging.bloomo.app'
++ elif args.env == 'prod':
++-    ENV_PATH = '.env.prod'
++     HOSTNAME = 'bloomo.app'
+  
+- // CORS
+--const origins = ['http://localhost:8080'];
+-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
++ if args.env in ['stag', 'prod']:
++@@ -304,8 +302,7 @@ if args.deploy_staging or args.deploy_production:
++     for i in [
++         'do',
++         'docker-compose.yml',
++-        'git-state',
++-        ENV_PATH
+++        'git-state'
++     ]:
++         cp_to_target(i, 'bloomo')
++     invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++diff --git a/docker-compose.yml b/docker-compose.yml
++index 5f2162e..7fe5c50 100644
++--- a/docker-compose.yml
+++++ b/docker-compose.yml
++@@ -18,8 +18,8 @@ services:
++     depends_on:
++       - db
++     volumes:
++-      - ${ENV_PATH}:/portal2-backend/env:ro
++-      - ${STATIC_PATH}:/portal2-backend/static:ro
+++      - ${ENV_PATH}:/bloomo/env:ro
+++      - ${STATIC_PATH}:/bloomo/static:ro
++     restart: always
++     ports:
++       - 8004:8004
++diff --git a/git-state b/git-state
++index af62c51..985102e 100644
++--- a/git-state
+++++ b/git-state
++@@ -1,424 +1,1914 @@
++-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
+++commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
++ Author: Ali Alizade Haqiqi <aliz@x-matik.com>
++-Date:   Sun Jul 4 02:40:38 2021 +0430
+++Date:   Sun Jul 11 18:48:16 2021 +0430
+  
+- // HELPERS
+- function asyncHandler(callback) {
+-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
+- const store = new SequelizeStore({ db: models.sequelize });
+- store.sync();
+- app.use(session({
+--  name: 'x-auth',
+--  secret: 'QeOtLqfzR8Su$',
+-+  name: process.env.AUTHERIZATION_NAME,
+-+  secret: process.env.AUTHERIZATION_SECRET,
+-   store,
+-   cookie: {
+-     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
+-diff --git a/src/models/index.js b/src/models/index.js
+-index 9858aed..1c7d446 100644
+---- a/src/models/index.js
+-+++ b/src/models/index.js
+-@@ -2,8 +2,8 @@ const fs = require('fs');
+- const path = require('path');
+- const Sequelize = require('sequelize');
+- const basename = path.basename(__filename);
+--const env = process.env.NODE_ENV || 'development';
+--const config = require(__dirname + '/../config/config.json')[env];
+-+const env = process.env.NODE_ENV;
+-+const config = require(__dirname + '/../config/config.js')[env];
+- const db = {};
++-    power ups feature
+++    ready to deploy
++     
++     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
+  
+- let sequelize;
+-diff --git a/src/utils.js b/src/utils.js
+-index ea09824..adabc50 100644
+---- a/src/utils.js
+-+++ b/src/utils.js
+-@@ -1,5 +1,5 @@
+- const _ = require('lodash');
+--const { utils } = require('Web3');
+-+const { utils } = require('web3');
+- const { getTime } = require('date-fns');
+++.sequelizerc
+++Dockerfile
+++do
+++docker-compose.yml
+++env/dev
+++env/env
+++git-state
+++package-lock.json
+++package.json
+++src/config/assets.js
+++src/config/assets.json
+++src/config/config.json
+++src/config/db.js
+++src/config/index.js
+++src/env.js
++ src/index.js
++ src/integrations/foundation/index.js
++-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
++-src/models/artworks.js
+++src/integrations/foundation/methods.js
+++src/integrations/foundation/methods.json
+++src/models/index.js
++ src/utils.js
+  
+- module.exports = {
++ ===== diff =====
++-diff --git a/.sequelizerc b/.sequelizerc
++-index 233b747..425db6b 100644
++---- a/.sequelizerc
++-+++ b/.sequelizerc
++-@@ -1,7 +1,7 @@
++- const path = require('path');
++- 
++- module.exports = {
++--  config: path.resolve('src', 'config', 'config.json'),
++-+  config: path.resolve('src', 'config', 'config.js'),
++-   'models-path': path.resolve('src', 'models'),
++-   'migrations-path': path.resolve('src', 'migrations'),
++- };
++ diff --git a/do b/do
++-index a927286..75d54d3 100755
+++index b7c5ae6..40c1051 100755
++ --- a/do
++ +++ b/do
++-@@ -2,24 +2,79 @@
++- 
++- #===== imports =====#
++- import argparse
++-+import collections
++- import copy
++- import datetime
++-+import getpass
++- import glob
++-+import hashlib
++-+import json
++-+import math
++- import os
++-+import pprint
++-+import random
++- import re
++-+import shutil
++- import subprocess
++- import sys
++-+import time
++- 
++- #===== args =====#
++- parser = argparse.ArgumentParser()
++-+# setup
++-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
++-+parser.add_argument('--db-create', '--dbc', action='store_true')
++-+parser.add_argument('--db-drop', '--dbd', action='store_true')
++-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
++-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
++-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
++-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
++-+
++-+# development
++- parser.add_argument('--run', '-r', action='store_true')
++- parser.add_argument('--sequelize-cli', '--seq', '-s')
++- 
++-+# deploy
++-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
++-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
++-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
++-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
++-+parser.add_argument('--deploy-skip-migrate', action='store_true')
++-+
++-+# config
++-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
++-+
++- args = parser.parse_args()
++- 
++-+if args.deploy_staging:
++-+    args.env = 'stag'
++-+elif args.deploy_production:
++-+    args.env = 'prod'
++-+
++- #===== consts =====#
++- DIR = os.path.dirname(os.path.realpath(__file__))
++- 
++-+DOCKER_REGISTRY = 'registry.bloomo.app'
++-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
++-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
++-+
++-+STATIC_PATH = '/bloomo/static'
++-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
++-+
++-+if args.env == 'dev':
++-+    ENV_PATH = '.env'
++-+    ORIGIN = 'http://localhost:8004'
++-+elif args.env == 'stag':
++-+    ENV_PATH = '.env.stag'
++-+    HOSTNAME = 'staging.bloomo.app'
++-+elif args.env == 'prod':
++-+    ENV_PATH = '.env.prod'
++-+    HOSTNAME = 'bloomo.app'
++-+
++-+if args.env in ['stag', 'prod']:
++-+    ORIGIN = f'https://{HOSTNAME}'
++-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
++-+
++- #===== setup =====#
++- os.chdir(DIR)
++- 
++-@@ -27,6 +82,71 @@ os.chdir(DIR)
++- def blue(text):
++-     return '\x1b[34m' + text + '\x1b[0m'
++- 
++-+def print_styled(string, end=None, style=None):
++-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
++-+    def replace(match):
++-+        if match.group(2) == '/': return match.group()
++-+        if match.group(1) == '/': return '\x1b[0m'
++-+        split = match.group(2).split('-')
++-+        while len(split) < 2: split.append('none')
++-+        color = split[0]
++-+        background = split[1]
++-+        decorations = split[2:]
++-+        if color.startswith('#'):
++-+            color = f'\x1b[38;5;{color[1:]}m'
++-+        else: color = {
++-+            'black': '\x1b[30m',
++-+            'red': '\x1b[31m',
++-+            'green': '\x1b[32m',
++-+            'yellow': '\x1b[33m',
++-+            'blue': '\x1b[34m',
++-+            'magenta': '\x1b[35m',
++-+            'cyan': '\x1b[36m',
++-+            'white': '\x1b[37m',
++-+            'lightblack': '\x1b[30;1m',
++-+            'lightred': '\x1b[31;1m',
++-+            'lightyellow': '\x1b[33;1m',
++-+            'lightgreen': '\x1b[32;1m',
++-+            'lightblue': '\x1b[34;1m',
++-+            'lightmagenta': '\x1b[35;1m',
++-+            'lightcyan': '\x1b[36;1m',
++-+            'lightwhite': '\x1b[37;1m',
++-+            'none': '',
++-+        }[color]
++-+        if background.startswith('#'):
++-+            background = f'\x1b[48;5;{background[1:]}m'
++-+        else: background = {
++-+            'black': '\x1b[40m',
++-+            'red': '\x1b[41m',
++-+            'green': '\x1b[42m',
++-+            'yellow': '\x1b[43m',
++-+            'blue': '\x1b[44m',
++-+            'magenta': '\x1b[45m',
++-+            'cyan': '\x1b[46m',
++-+            'white': '\x1b[47m',
++-+            'lightblack': '\x1b[40;1m',
++-+            'lightred': '\x1b[41;1m',
++-+            'lightyellow': '\x1b[43;1m',
++-+            'lightgreen': '\x1b[42;1m',
++-+            'lightblue': '\x1b[44;1m',
++-+            'lightmagenta': '\x1b[45;1m',
++-+            'lightcyan': '\x1b[46;1m',
++-+            'lightwhite': '\x1b[47;1m',
++-+            'none': '',
++-+        }[background]
++-+        decorations = ''.join([
++-+            {
++-+                'bold': '\x1b[1m',
++-+                'underlined': '\x1b[4m',
++-+                'reversed': '\x1b[7m',
++-+                'none': '',
++-+            }[i]
++-+            for i in decorations
++-+        ])
++-+        return color + background + decorations
++-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
++-+    return re.sub('<(/?)(.*?)>', '', string)
++-+
++- def timestamp():
++-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
++- 
++-@@ -44,15 +164,16 @@ def invoke(
++-         print(blue('-'*40))
++-         print(timestamp())
++-         print(os.getcwd()+'$', end=' ')
++--        for i, v in enumerate(args):
++--            if re.search(r'\s', v):
++--                v = v.replace("'", """ '"'"' """.strip())
++--                v = f"'{v}'"
++--            if i != len(args)-1:
++--                end = ' '
++--            else:
++--                end = ';\n'
++--            print(v, end=end)
++-+        if any([re.search(r'\s', i) for i in args]):
++-+            print()
++-+            for i in args: print(f'\t{i} \\')
++-+        else:
++-+            for i, v in enumerate(args):
++-+                if i != len(args)-1:
++-+                    end = ' '
++-+                else:
++-+                    end = ';\n'
++-+                print(v, end=end)
++-         if kwargs: print(kwargs)
++-         if popen: print('popen')
++-         print()
++-@@ -67,15 +188,131 @@ def invoke(
++-         if stdout: kwargs['capture_output'] = True
++-         result = subprocess.run(args, **kwargs)
++-         if stdout:
++--            result = result.stdout.decode('utf-8').strip()
++-+            result = result.stdout.decode('utf-8')
++-+            if stdout != 'exact': result = result.strip()
++-         return result
+++@@ -59,18 +59,16 @@ DOCKER_REGISTRY = 'registry.bloomo.app'
+++ DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
+++ DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
++  
++-+def invoke_target(*args, **kwargs):
++-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
++-+
++-+def cp_to_target(src, dst, quiet=False):
++-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
++-+
++-+def psqlc(command, db='', quiet=False, use_file=False):
++-+    if not quiet: print(command)
++-+    if use_file:
++-+        with open('command.sql', 'w') as file: file.write(command)
++-+    invocation = ['su', 'postgres', '-c']
++-+    if use_file:
++-+        invocation.append(f'psql {db} -f command.sql')
++-+    else:
++-+        invocation.append(f'psql {db} -c "{command}"')
++-+    if getpass.getuser() != 'root':
++-+        invocation.insert(0, 'sudo')
++-+    invoke(*invocation, quiet=quiet)
++-+
++-+def psqlc_target(command, options='', quiet=False, use_file=False):
++-+    if not quiet: print(command)
++-+    if args.db_dry_sql: return
++-+    if use_file:
++-+        with open('command.sql', 'w') as file: file.write(command)
++-+        cp_to_target('command.sql', '.', quiet=True)
++-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
++-+    separator = f'({UUID})'
++-+    result = invoke_target(
++-+        ' '.join([
++-+            'docker exec portal2-backend-db',
++-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
++-+                    '-f command.sql' if use_file else f'-c "{command}"',
++-+                    '-t',
++-+                    '--no-align',
++-+                    f'-F "{separator}"',
++-+                    options,
++-+        ]),
++-+        stdout=True,
++-+        quiet=True,
++-+    )
++-+    return [line.split(separator) for line in result.splitlines()]
++-+
++-+def dotenv_get(var):
++-+    if os.environ[var]:
++-+        return os.environ[var]
++-+    with open(ENV_PATH) as env:
++-+        lines = env.readlines()
++-+    for line in lines:
++-+        if line.startswith(var+'='):
++-+            return line[len(var)+1:].strip()
++-+
++-+def git_state():
++-+    diff = invoke('git diff', stdout=True)
++-+    diff_cached = invoke('git diff --cached', stdout=True)
++-+    with open('git-state', 'w') as git_state:
++-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
++-+        if diff:
++-+            git_state.write('\n===== diff =====\n')
++-+            git_state.write(diff+'\n')
++-+        if diff_cached:
++-+            git_state.write('\n===== diff --cached =====\n')
++-+            git_state.write(diff_cached+'\n')
++-+
++- #===== main =====#
++- if len(sys.argv) == 1:
++-     parser.print_help()
++-     sys.exit()
++++ENV_PATH = '/root/bloomo/env'
+++ STATIC_PATH = '/bloomo/static'
+++ POSTGRES_DATA_PATH = '/mnt/postgres-data'
+++ POSTGRES_PW = 'QeOtLqfzR8Su$'
++  
++-+if args.full_dev_setup:
++-+    invoke('npm ci')
++-+
++-+if args.db_drop or args.db_fresh:
++-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
++-+
++-+if args.db_user_drop or args.db_fresh:
++-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
++-+
++-+if args.db_create or args.full_dev_setup or args.db_fresh:
++-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
++-+
++-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
++-+    db_user = dotenv_get('DB_USER')
++-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
++-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
++-+
++-+if args.full_dev_setup or args.db_fresh:
++-+    invoke('npx sequelize-cli db:migrate')
++-+
++- if args.run:
++-     invoke(f'npx nodemon src/index.js')
++--elif args.sequelize_cli:
++-+
++-+if args.sequelize_cli:
++-     invoke(f'npx sequelize-cli')
++-+
++-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
++-+    git_state()
++-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
++-+    invoke(f'docker build -t {DOCKER_TAG} .')
++-+
++-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
++-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++-+    invoke(f'docker push {DOCKER_TAG}')
++-+
++-+if args.deploy_staging or args.deploy_production:
++-+    invoke_target('mkdir bloomo', check=False)
++-+    git_state()
++-+    for i in [
++-+        'do',
++-+        'docker-compose.yml',
++-+        'git-state',
++-+        ENV_PATH
++-+    ]:
++-+        cp_to_target(i, 'bloomo')
++-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++-+    invoke_target(f'docker pull {DOCKER_TAG}')
++-+    invoke_target(' '.join([
++-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
++-+        f'DOCKER_TAG={DOCKER_TAG}',
++-+        f'STATIC_PATH={STATIC_PATH}',
++-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
++-+    ]))
++-+    if not args.deploy_skip_migrate:
++-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
++-+    invoke_target('docker system prune --force')
++-diff --git a/src/config/config.json b/src/config/config.json
++-deleted file mode 100644
++-index 3b6981b..0000000
++---- a/src/config/config.json
++-+++ /dev/null
++-@@ -1,24 +0,0 @@
++--{
++--  "development": {
++--    "username": "u_bloom",
++--    "password": "king_1374",
++--    "database": "bloom",
++--    "host": "localhost",
++--    "dialect": "postgres",
++--    "define": {
++--      "createdAt": "created_at",
++--      "updatedAt": "updated_at"
++--    }
++--  },
++--  "production": {
++--    "username": "u-bloom",
++--    "password": "QeOtLqfzR8Su$",
++--    "database": "bloom",
++--    "host": "localhost",
++--    "dialect": "postgres",
++--    "define": {
++--      "createdAt": "created_at",
++--      "updatedAt": "updated_at"
++--    }
++--  }
++--}
++-diff --git a/src/index.js b/src/index.js
++-index 0b4526f..b7ab55f 100644
++---- a/src/index.js
++-+++ b/src/index.js
++-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
++- const ASSETS = require('./config/assets.json');
+++ if args.env == 'dev':
+++-    ENV_PATH = '.env'
+++     ORIGIN = 'http://localhost:8004'
+++ elif args.env == 'stag':
+++-    ENV_PATH = '.env.stag'
+++     HOSTNAME = 'staging.bloomo.app'
+++ elif args.env == 'prod':
+++-    ENV_PATH = '.env.prod'
+++     HOSTNAME = 'bloomo.app'
++  
++- // CORS
++--const origins = ['http://localhost:8080'];
++-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
+++ if args.env in ['stag', 'prod']:
+++@@ -304,8 +302,7 @@ if args.deploy_staging or args.deploy_production:
+++     for i in [
+++         'do',
+++         'docker-compose.yml',
+++-        'git-state',
+++-        ENV_PATH
++++        'git-state'
+++     ]:
+++         cp_to_target(i, 'bloomo')
+++     invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+++diff --git a/docker-compose.yml b/docker-compose.yml
+++index 5f2162e..7fe5c50 100644
+++--- a/docker-compose.yml
++++++ b/docker-compose.yml
+++@@ -18,8 +18,8 @@ services:
+++     depends_on:
+++       - db
+++     volumes:
+++-      - ${ENV_PATH}:/portal2-backend/env:ro
+++-      - ${STATIC_PATH}:/portal2-backend/static:ro
++++      - ${ENV_PATH}:/bloomo/env:ro
++++      - ${STATIC_PATH}:/bloomo/static:ro
+++     restart: always
+++     ports:
+++       - 8004:8004
+++diff --git a/git-state b/git-state
+++index af62c51..9bf17e0 100644
+++--- a/git-state
++++++ b/git-state
+++@@ -1,424 +1,1427 @@
+++-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
++++commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
+++ Author: Ali Alizade Haqiqi <aliz@x-matik.com>
+++-Date:   Sun Jul 4 02:40:38 2021 +0430
++++Date:   Sun Jul 11 18:48:16 2021 +0430
++  
++- // HELPERS
++- function asyncHandler(callback) {
++-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
++- const store = new SequelizeStore({ db: models.sequelize });
++- store.sync();
++- app.use(session({
++--  name: 'x-auth',
++--  secret: 'QeOtLqfzR8Su$',
++-+  name: process.env.AUTHERIZATION_NAME,
++-+  secret: process.env.AUTHERIZATION_SECRET,
++-   store,
++-   cookie: {
++-     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
++-diff --git a/src/models/index.js b/src/models/index.js
++-index 9858aed..1c7d446 100644
++---- a/src/models/index.js
++-+++ b/src/models/index.js
++-@@ -2,8 +2,8 @@ const fs = require('fs');
++- const path = require('path');
++- const Sequelize = require('sequelize');
++- const basename = path.basename(__filename);
++--const env = process.env.NODE_ENV || 'development';
++--const config = require(__dirname + '/../config/config.json')[env];
++-+const env = process.env.NODE_ENV;
++-+const config = require(__dirname + '/../config/config.js')[env];
++- const db = {};
+++-    power ups feature
++++    ready to deploy
+++     
+++     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
++  
++- let sequelize;
++-diff --git a/src/utils.js b/src/utils.js
++-index ea09824..adabc50 100644
++---- a/src/utils.js
++-+++ b/src/utils.js
++-@@ -1,5 +1,5 @@
++- const _ = require('lodash');
++--const { utils } = require('Web3');
++-+const { utils } = require('web3');
++- const { getTime } = require('date-fns');
++++.sequelizerc
++++Dockerfile
++++do
++++docker-compose.yml
++++env/dev
++++env/env
++++git-state
++++package-lock.json
++++package.json
++++src/config/assets.js
++++src/config/assets.json
++++src/config/config.json
++++src/config/db.js
++++src/config/index.js
++++src/env.js
+++ src/index.js
+++ src/integrations/foundation/index.js
+++-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
+++-src/models/artworks.js
++++src/integrations/foundation/methods.js
++++src/integrations/foundation/methods.json
++++src/models/index.js
+++ src/utils.js
++  
++- module.exports = {
+++ ===== diff =====
+++-diff --git a/.sequelizerc b/.sequelizerc
+++-index 233b747..425db6b 100644
+++---- a/.sequelizerc
+++-+++ b/.sequelizerc
+++-@@ -1,7 +1,7 @@
+++- const path = require('path');
+++- 
+++- module.exports = {
+++--  config: path.resolve('src', 'config', 'config.json'),
+++-+  config: path.resolve('src', 'config', 'config.js'),
+++-   'models-path': path.resolve('src', 'models'),
+++-   'migrations-path': path.resolve('src', 'migrations'),
+++- };
+++ diff --git a/do b/do
+++-index a927286..75d54d3 100755
++++index b7c5ae6..977fd5b 100755
+++ --- a/do
+++ +++ b/do
+++-@@ -2,24 +2,79 @@
+++- 
+++- #===== imports =====#
+++- import argparse
+++-+import collections
+++- import copy
+++- import datetime
+++-+import getpass
+++- import glob
+++-+import hashlib
+++-+import json
+++-+import math
+++- import os
+++-+import pprint
+++-+import random
+++- import re
+++-+import shutil
+++- import subprocess
+++- import sys
+++-+import time
+++- 
+++- #===== args =====#
+++- parser = argparse.ArgumentParser()
+++-+# setup
+++-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
+++-+parser.add_argument('--db-create', '--dbc', action='store_true')
+++-+parser.add_argument('--db-drop', '--dbd', action='store_true')
+++-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
+++-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
+++-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
+++-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
+++-+
+++-+# development
+++- parser.add_argument('--run', '-r', action='store_true')
+++- parser.add_argument('--sequelize-cli', '--seq', '-s')
+++- 
+++-+# deploy
+++-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
+++-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
+++-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
+++-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
+++-+parser.add_argument('--deploy-skip-migrate', action='store_true')
+++-+
+++-+# config
+++-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
+++-+
+++- args = parser.parse_args()
++++@@ -59,18 +59,16 @@ DOCKER_REGISTRY = 'registry.bloomo.app'
++++ DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
++++ DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
+++  
+++-+if args.deploy_staging:
+++-+    args.env = 'stag'
+++-+elif args.deploy_production:
+++-+    args.env = 'prod'
+++-+
+++- #===== consts =====#
+++- DIR = os.path.dirname(os.path.realpath(__file__))
+++++ENV_PATH = '/root/bloomo/env'
++++ STATIC_PATH = '/bloomo/static'
++++ POSTGRES_DATA_PATH = '/mnt/postgres-data'
++++ POSTGRES_PW = 'QeOtLqfzR8Su$'
+++  
+++-+DOCKER_REGISTRY = 'registry.bloomo.app'
+++-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
+++-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
+++-+
+++-+STATIC_PATH = '/bloomo/static'
+++-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
+++-+
+++-+if args.env == 'dev':
+++-+    ENV_PATH = '.env'
+++-+    ORIGIN = 'http://localhost:8004'
+++-+elif args.env == 'stag':
+++-+    ENV_PATH = '.env.stag'
+++-+    HOSTNAME = 'staging.bloomo.app'
+++-+elif args.env == 'prod':
+++-+    ENV_PATH = '.env.prod'
+++-+    HOSTNAME = 'bloomo.app'
+++-+
+++-+if args.env in ['stag', 'prod']:
+++-+    ORIGIN = f'https://{HOSTNAME}'
+++-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
+++-+
+++- #===== setup =====#
+++- os.chdir(DIR)
++++ if args.env == 'dev':
++++-    ENV_PATH = '.env'
++++     ORIGIN = 'http://localhost:8004'
++++ elif args.env == 'stag':
++++-    ENV_PATH = '.env.stag'
++++     HOSTNAME = 'staging.bloomo.app'
++++ elif args.env == 'prod':
++++-    ENV_PATH = '.env.prod'
++++     HOSTNAME = 'bloomo.app'
+++  
+++-@@ -27,6 +82,71 @@ os.chdir(DIR)
+++- def blue(text):
+++-     return '\x1b[34m' + text + '\x1b[0m'
+++- 
+++-+def print_styled(string, end=None, style=None):
+++-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
+++-+    def replace(match):
+++-+        if match.group(2) == '/': return match.group()
+++-+        if match.group(1) == '/': return '\x1b[0m'
+++-+        split = match.group(2).split('-')
+++-+        while len(split) < 2: split.append('none')
+++-+        color = split[0]
+++-+        background = split[1]
+++-+        decorations = split[2:]
+++-+        if color.startswith('#'):
+++-+            color = f'\x1b[38;5;{color[1:]}m'
+++-+        else: color = {
+++-+            'black': '\x1b[30m',
+++-+            'red': '\x1b[31m',
+++-+            'green': '\x1b[32m',
+++-+            'yellow': '\x1b[33m',
+++-+            'blue': '\x1b[34m',
+++-+            'magenta': '\x1b[35m',
+++-+            'cyan': '\x1b[36m',
+++-+            'white': '\x1b[37m',
+++-+            'lightblack': '\x1b[30;1m',
+++-+            'lightred': '\x1b[31;1m',
+++-+            'lightyellow': '\x1b[33;1m',
+++-+            'lightgreen': '\x1b[32;1m',
+++-+            'lightblue': '\x1b[34;1m',
+++-+            'lightmagenta': '\x1b[35;1m',
+++-+            'lightcyan': '\x1b[36;1m',
+++-+            'lightwhite': '\x1b[37;1m',
+++-+            'none': '',
+++-+        }[color]
+++-+        if background.startswith('#'):
+++-+            background = f'\x1b[48;5;{background[1:]}m'
+++-+        else: background = {
+++-+            'black': '\x1b[40m',
+++-+            'red': '\x1b[41m',
+++-+            'green': '\x1b[42m',
+++-+            'yellow': '\x1b[43m',
+++-+            'blue': '\x1b[44m',
+++-+            'magenta': '\x1b[45m',
+++-+            'cyan': '\x1b[46m',
+++-+            'white': '\x1b[47m',
+++-+            'lightblack': '\x1b[40;1m',
+++-+            'lightred': '\x1b[41;1m',
+++-+            'lightyellow': '\x1b[43;1m',
+++-+            'lightgreen': '\x1b[42;1m',
+++-+            'lightblue': '\x1b[44;1m',
+++-+            'lightmagenta': '\x1b[45;1m',
+++-+            'lightcyan': '\x1b[46;1m',
+++-+            'lightwhite': '\x1b[47;1m',
+++-+            'none': '',
+++-+        }[background]
+++-+        decorations = ''.join([
+++-+            {
+++-+                'bold': '\x1b[1m',
+++-+                'underlined': '\x1b[4m',
+++-+                'reversed': '\x1b[7m',
+++-+                'none': '',
+++-+            }[i]
+++-+            for i in decorations
+++-+        ])
+++-+        return color + background + decorations
+++-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
+++-+    return re.sub('<(/?)(.*?)>', '', string)
+++-+
+++- def timestamp():
+++-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
+++- 
+++-@@ -44,15 +164,16 @@ def invoke(
+++-         print(blue('-'*40))
+++-         print(timestamp())
+++-         print(os.getcwd()+'$', end=' ')
+++--        for i, v in enumerate(args):
+++--            if re.search(r'\s', v):
+++--                v = v.replace("'", """ '"'"' """.strip())
+++--                v = f"'{v}'"
+++--            if i != len(args)-1:
+++--                end = ' '
+++--            else:
+++--                end = ';\n'
+++--            print(v, end=end)
+++-+        if any([re.search(r'\s', i) for i in args]):
+++-+            print()
+++-+            for i in args: print(f'\t{i} \\')
+++-+        else:
+++-+            for i, v in enumerate(args):
+++-+                if i != len(args)-1:
+++-+                    end = ' '
+++-+                else:
+++-+                    end = ';\n'
+++-+                print(v, end=end)
+++-         if kwargs: print(kwargs)
+++-         if popen: print('popen')
+++-         print()
+++-@@ -67,15 +188,131 @@ def invoke(
+++-         if stdout: kwargs['capture_output'] = True
+++-         result = subprocess.run(args, **kwargs)
+++-         if stdout:
+++--            result = result.stdout.decode('utf-8').strip()
+++-+            result = result.stdout.decode('utf-8')
+++-+            if stdout != 'exact': result = result.strip()
+++-         return result
++++ if args.env in ['stag', 'prod']:
++++@@ -289,14 +287,14 @@ if args.run:
++++ if args.sequelize_cli:
++++     invoke(f'npx sequelize-cli')
+++  
+++-+def invoke_target(*args, **kwargs):
+++-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
+++-+
+++-+def cp_to_target(src, dst, quiet=False):
+++-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
+++-+
+++-+def psqlc(command, db='', quiet=False, use_file=False):
+++-+    if not quiet: print(command)
+++-+    if use_file:
+++-+        with open('command.sql', 'w') as file: file.write(command)
+++-+    invocation = ['su', 'postgres', '-c']
+++-+    if use_file:
+++-+        invocation.append(f'psql {db} -f command.sql')
+++-+    else:
+++-+        invocation.append(f'psql {db} -c "{command}"')
+++-+    if getpass.getuser() != 'root':
+++-+        invocation.insert(0, 'sudo')
+++-+    invoke(*invocation, quiet=quiet)
+++-+
+++-+def psqlc_target(command, options='', quiet=False, use_file=False):
+++-+    if not quiet: print(command)
+++-+    if args.db_dry_sql: return
+++-+    if use_file:
+++-+        with open('command.sql', 'w') as file: file.write(command)
+++-+        cp_to_target('command.sql', '.', quiet=True)
+++-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
+++-+    separator = f'({UUID})'
+++-+    result = invoke_target(
+++-+        ' '.join([
+++-+            'docker exec portal2-backend-db',
+++-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
+++-+                    '-f command.sql' if use_file else f'-c "{command}"',
+++-+                    '-t',
+++-+                    '--no-align',
+++-+                    f'-F "{separator}"',
+++-+                    options,
+++-+        ]),
+++-+        stdout=True,
+++-+        quiet=True,
+++-+    )
+++-+    return [line.split(separator) for line in result.splitlines()]
+++-+
+++-+def dotenv_get(var):
+++-+    if os.environ[var]:
+++-+        return os.environ[var]
+++-+    with open(ENV_PATH) as env:
+++-+        lines = env.readlines()
+++-+    for line in lines:
+++-+        if line.startswith(var+'='):
+++-+            return line[len(var)+1:].strip()
+++-+
+++-+def git_state():
+++-+    diff = invoke('git diff', stdout=True)
+++-+    diff_cached = invoke('git diff --cached', stdout=True)
+++-+    with open('git-state', 'w') as git_state:
+++-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
+++-+        if diff:
+++-+            git_state.write('\n===== diff =====\n')
+++-+            git_state.write(diff+'\n')
+++-+        if diff_cached:
+++-+            git_state.write('\n===== diff --cached =====\n')
+++-+            git_state.write(diff_cached+'\n')
+++-+
+++- #===== main =====#
+++- if len(sys.argv) == 1:
+++-     parser.print_help()
+++-     sys.exit()
++++-if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
+++++""" if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
++++     git_state()
++++     invoke(f'docker image rm {DOCKER_TAG}', check=False)
++++     invoke(f'docker build -t {DOCKER_TAG} .')
+++  
+++-+if args.full_dev_setup:
+++-+    invoke('npm ci')
+++-+
+++-+if args.db_drop or args.db_fresh:
+++-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
+++-+
+++-+if args.db_user_drop or args.db_fresh:
+++-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
+++-+
+++-+if args.db_create or args.full_dev_setup or args.db_fresh:
+++-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
+++-+
+++-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
+++-+    db_user = dotenv_get('DB_USER')
+++-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
+++-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
+++-+
+++-+if args.full_dev_setup or args.db_fresh:
+++-+    invoke('npx sequelize-cli db:migrate')
+++-+
+++- if args.run:
+++-     invoke(f'npx nodemon src/index.js')
+++--elif args.sequelize_cli:
+++-+
+++-+if args.sequelize_cli:
+++-     invoke(f'npx sequelize-cli')
+++-+
+++-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
+++-+    git_state()
+++-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
+++-+    invoke(f'docker build -t {DOCKER_TAG} .')
+++-+
+++-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
+++-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+++-+    invoke(f'docker push {DOCKER_TAG}')
+++-+
+++-+if args.deploy_staging or args.deploy_production:
+++-+    invoke_target('mkdir bloomo', check=False)
+++-+    git_state()
+++-+    for i in [
+++-+        'do',
+++-+        'docker-compose.yml',
+++-+        'git-state',
+++-+        ENV_PATH
+++-+    ]:
+++-+        cp_to_target(i, 'bloomo')
+++-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+++-+    invoke_target(f'docker pull {DOCKER_TAG}')
+++-+    invoke_target(' '.join([
+++-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
+++-+        f'DOCKER_TAG={DOCKER_TAG}',
+++-+        f'STATIC_PATH={STATIC_PATH}',
+++-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
+++-+    ]))
+++-+    if not args.deploy_skip_migrate:
+++-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
+++-+    invoke_target('docker system prune --force')
+++-diff --git a/src/config/config.json b/src/config/config.json
+++-deleted file mode 100644
+++-index 3b6981b..0000000
+++---- a/src/config/config.json
+++-+++ /dev/null
+++-@@ -1,24 +0,0 @@
+++--{
+++--  "development": {
+++--    "username": "u_bloom",
+++--    "password": "king_1374",
+++--    "database": "bloom",
+++--    "host": "localhost",
+++--    "dialect": "postgres",
+++--    "define": {
+++--      "createdAt": "created_at",
+++--      "updatedAt": "updated_at"
+++--    }
+++--  },
+++--  "production": {
+++--    "username": "u-bloom",
+++--    "password": "QeOtLqfzR8Su$",
+++--    "database": "bloom",
+++--    "host": "localhost",
+++--    "dialect": "postgres",
+++--    "define": {
+++--      "createdAt": "created_at",
+++--      "updatedAt": "updated_at"
+++--    }
+++--  }
+++--}
+++-diff --git a/src/index.js b/src/index.js
+++-index 0b4526f..b7ab55f 100644
+++---- a/src/index.js
+++-+++ b/src/index.js
+++-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
+++- const ASSETS = require('./config/assets.json');
++++ if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
++++     invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++++-    invoke(f'docker push {DOCKER_TAG}')
+++++    invoke(f'docker push {DOCKER_TAG}') """
+++  
+++- // CORS
+++--const origins = ['http://localhost:8080'];
+++-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
++++ if args.deploy_staging or args.deploy_production:
++++     invoke_target('mkdir bloomo', check=False)
++++@@ -304,8 +302,7 @@ if args.deploy_staging or args.deploy_production:
++++     for i in [
++++         'do',
++++         'docker-compose.yml',
++++-        'git-state',
++++-        ENV_PATH
+++++        'git-state'
++++     ]:
++++         cp_to_target(i, 'bloomo')
++++     invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++++diff --git a/git-state b/git-state
++++index af62c51..95b6456 100644
++++--- a/git-state
+++++++ b/git-state
++++@@ -1,424 +1,929 @@
++++-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
+++++commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
++++ Author: Ali Alizade Haqiqi <aliz@x-matik.com>
++++-Date:   Sun Jul 4 02:40:38 2021 +0430
+++++Date:   Sun Jul 11 18:48:16 2021 +0430
+++  
+++- // HELPERS
+++- function asyncHandler(callback) {
+++-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
+++- const store = new SequelizeStore({ db: models.sequelize });
+++- store.sync();
+++- app.use(session({
+++--  name: 'x-auth',
+++--  secret: 'QeOtLqfzR8Su$',
+++-+  name: process.env.AUTHERIZATION_NAME,
+++-+  secret: process.env.AUTHERIZATION_SECRET,
+++-   store,
+++-   cookie: {
+++-     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
+++-diff --git a/src/models/index.js b/src/models/index.js
+++-index 9858aed..1c7d446 100644
+++---- a/src/models/index.js
+++-+++ b/src/models/index.js
+++-@@ -2,8 +2,8 @@ const fs = require('fs');
+++- const path = require('path');
+++- const Sequelize = require('sequelize');
+++- const basename = path.basename(__filename);
+++--const env = process.env.NODE_ENV || 'development';
+++--const config = require(__dirname + '/../config/config.json')[env];
+++-+const env = process.env.NODE_ENV;
+++-+const config = require(__dirname + '/../config/config.js')[env];
+++- const db = {};
++++-    power ups feature
+++++    ready to deploy
++++     
++++     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
+++  
+++- let sequelize;
+++-diff --git a/src/utils.js b/src/utils.js
+++-index ea09824..adabc50 100644
+++---- a/src/utils.js
+++-+++ b/src/utils.js
+++-@@ -1,5 +1,5 @@
+++- const _ = require('lodash');
+++--const { utils } = require('Web3');
+++-+const { utils } = require('web3');
+++- const { getTime } = require('date-fns');
+++++.sequelizerc
+++++Dockerfile
+++++do
+++++docker-compose.yml
+++++env/dev
+++++env/env
+++++git-state
+++++package-lock.json
+++++package.json
+++++src/config/assets.js
+++++src/config/assets.json
+++++src/config/config.json
+++++src/config/db.js
+++++src/config/index.js
+++++src/env.js
++++ src/index.js
++++ src/integrations/foundation/index.js
++++-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
++++-src/models/artworks.js
+++++src/integrations/foundation/methods.js
+++++src/integrations/foundation/methods.json
+++++src/models/index.js
++++ src/utils.js
+++  
+++- module.exports = {
++++ ===== diff =====
++++-diff --git a/.sequelizerc b/.sequelizerc
++++-index 233b747..425db6b 100644
++++---- a/.sequelizerc
++++-+++ b/.sequelizerc
++++-@@ -1,7 +1,7 @@
++++- const path = require('path');
+++++diff --git a/git-state b/git-state
+++++index af62c51..6d71ec1 100644
+++++--- a/git-state
++++++++ b/git-state
+++++@@ -1,424 +1,481 @@
+++++-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
++++++commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
+++++ Author: Ali Alizade Haqiqi <aliz@x-matik.com>
+++++-Date:   Sun Jul 4 02:40:38 2021 +0430
++++++Date:   Sun Jul 11 18:48:16 2021 +0430
++++  
++++- module.exports = {
++++--  config: path.resolve('src', 'config', 'config.json'),
++++-+  config: path.resolve('src', 'config', 'config.js'),
++++-   'models-path': path.resolve('src', 'models'),
++++-   'migrations-path': path.resolve('src', 'migrations'),
++++- };
++++-diff --git a/do b/do
++++-index a927286..75d54d3 100755
++++---- a/do
++++-+++ b/do
++++-@@ -2,24 +2,79 @@
+++++-    power ups feature
++++++    ready to deploy
+++++     
+++++     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
++++  
++++- #===== imports =====#
++++- import argparse
++++-+import collections
++++- import copy
++++- import datetime
++++-+import getpass
++++- import glob
++++-+import hashlib
++++-+import json
++++-+import math
++++- import os
++++-+import pprint
++++-+import random
++++- import re
++++-+import shutil
++++- import subprocess
++++- import sys
++++-+import time
++++++.sequelizerc
++++++Dockerfile
++++++do
++++++docker-compose.yml
++++++env/dev
++++++env/env
++++++git-state
++++++package-lock.json
++++++package.json
++++++src/config/assets.js
++++++src/config/assets.json
++++++src/config/config.json
++++++src/config/db.js
++++++src/config/index.js
++++++src/env.js
+++++ src/index.js
+++++ src/integrations/foundation/index.js
+++++-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
+++++-src/models/artworks.js
++++++src/integrations/foundation/methods.js
++++++src/integrations/foundation/methods.json
++++++src/models/index.js
+++++ src/utils.js
++++  
++++- #===== args =====#
++++- parser = argparse.ArgumentParser()
++++-+# setup
++++-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
++++-+parser.add_argument('--db-create', '--dbc', action='store_true')
++++-+parser.add_argument('--db-drop', '--dbd', action='store_true')
++++-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
++++-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
++++-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
++++-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
++++-+
++++-+# development
++++- parser.add_argument('--run', '-r', action='store_true')
++++- parser.add_argument('--sequelize-cli', '--seq', '-s')
++++- 
++++-+# deploy
++++-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
++++-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
++++-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
++++-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
++++-+parser.add_argument('--deploy-skip-migrate', action='store_true')
++++-+
++++-+# config
++++-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
++++-+
++++- args = parser.parse_args()
++++- 
++++-+if args.deploy_staging:
++++-+    args.env = 'stag'
++++-+elif args.deploy_production:
++++-+    args.env = 'prod'
++++-+
++++- #===== consts =====#
++++- DIR = os.path.dirname(os.path.realpath(__file__))
++++- 
++++-+DOCKER_REGISTRY = 'registry.bloomo.app'
++++-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
++++-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
++++-+
++++-+STATIC_PATH = '/bloomo/static'
++++-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
++++-+
++++-+if args.env == 'dev':
++++-+    ENV_PATH = '.env'
++++-+    ORIGIN = 'http://localhost:8004'
++++-+elif args.env == 'stag':
++++-+    ENV_PATH = '.env.stag'
++++-+    HOSTNAME = 'staging.bloomo.app'
++++-+elif args.env == 'prod':
++++-+    ENV_PATH = '.env.prod'
++++-+    HOSTNAME = 'bloomo.app'
++++-+
++++-+if args.env in ['stag', 'prod']:
++++-+    ORIGIN = f'https://{HOSTNAME}'
++++-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
++++-+
++++- #===== setup =====#
++++- os.chdir(DIR)
++++- 
++++-@@ -27,6 +82,71 @@ os.chdir(DIR)
++++- def blue(text):
++++-     return '\x1b[34m' + text + '\x1b[0m'
++++- 
++++-+def print_styled(string, end=None, style=None):
++++-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
++++-+    def replace(match):
++++-+        if match.group(2) == '/': return match.group()
++++-+        if match.group(1) == '/': return '\x1b[0m'
++++-+        split = match.group(2).split('-')
++++-+        while len(split) < 2: split.append('none')
++++-+        color = split[0]
++++-+        background = split[1]
++++-+        decorations = split[2:]
++++-+        if color.startswith('#'):
++++-+            color = f'\x1b[38;5;{color[1:]}m'
++++-+        else: color = {
++++-+            'black': '\x1b[30m',
++++-+            'red': '\x1b[31m',
++++-+            'green': '\x1b[32m',
++++-+            'yellow': '\x1b[33m',
++++-+            'blue': '\x1b[34m',
++++-+            'magenta': '\x1b[35m',
++++-+            'cyan': '\x1b[36m',
++++-+            'white': '\x1b[37m',
++++-+            'lightblack': '\x1b[30;1m',
++++-+            'lightred': '\x1b[31;1m',
++++-+            'lightyellow': '\x1b[33;1m',
++++-+            'lightgreen': '\x1b[32;1m',
++++-+            'lightblue': '\x1b[34;1m',
++++-+            'lightmagenta': '\x1b[35;1m',
++++-+            'lightcyan': '\x1b[36;1m',
++++-+            'lightwhite': '\x1b[37;1m',
++++-+            'none': '',
++++-+        }[color]
++++-+        if background.startswith('#'):
++++-+            background = f'\x1b[48;5;{background[1:]}m'
++++-+        else: background = {
++++-+            'black': '\x1b[40m',
++++-+            'red': '\x1b[41m',
++++-+            'green': '\x1b[42m',
++++-+            'yellow': '\x1b[43m',
++++-+            'blue': '\x1b[44m',
++++-+            'magenta': '\x1b[45m',
++++-+            'cyan': '\x1b[46m',
++++-+            'white': '\x1b[47m',
++++-+            'lightblack': '\x1b[40;1m',
++++-+            'lightred': '\x1b[41;1m',
++++-+            'lightyellow': '\x1b[43;1m',
++++-+            'lightgreen': '\x1b[42;1m',
++++-+            'lightblue': '\x1b[44;1m',
++++-+            'lightmagenta': '\x1b[45;1m',
++++-+            'lightcyan': '\x1b[46;1m',
++++-+            'lightwhite': '\x1b[47;1m',
++++-+            'none': '',
++++-+        }[background]
++++-+        decorations = ''.join([
++++-+            {
++++-+                'bold': '\x1b[1m',
++++-+                'underlined': '\x1b[4m',
++++-+                'reversed': '\x1b[7m',
++++-+                'none': '',
++++-+            }[i]
++++-+            for i in decorations
++++-+        ])
++++-+        return color + background + decorations
++++-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
++++-+    return re.sub('<(/?)(.*?)>', '', string)
++++-+
++++- def timestamp():
++++-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
++++- 
++++-@@ -44,15 +164,16 @@ def invoke(
++++-         print(blue('-'*40))
++++-         print(timestamp())
++++-         print(os.getcwd()+'$', end=' ')
++++--        for i, v in enumerate(args):
++++--            if re.search(r'\s', v):
++++--                v = v.replace("'", """ '"'"' """.strip())
++++--                v = f"'{v}'"
++++--            if i != len(args)-1:
++++--                end = ' '
++++--            else:
++++--                end = ';\n'
++++--            print(v, end=end)
++++-+        if any([re.search(r'\s', i) for i in args]):
++++-+            print()
++++-+            for i in args: print(f'\t{i} \\')
++++-+        else:
++++-+            for i, v in enumerate(args):
++++-+                if i != len(args)-1:
++++-+                    end = ' '
++++-+                else:
++++-+                    end = ';\n'
++++-+                print(v, end=end)
++++-         if kwargs: print(kwargs)
++++-         if popen: print('popen')
++++-         print()
++++-@@ -67,15 +188,131 @@ def invoke(
++++-         if stdout: kwargs['capture_output'] = True
++++-         result = subprocess.run(args, **kwargs)
++++-         if stdout:
++++--            result = result.stdout.decode('utf-8').strip()
++++-+            result = result.stdout.decode('utf-8')
++++-+            if stdout != 'exact': result = result.strip()
++++-         return result
++++- 
++++-+def invoke_target(*args, **kwargs):
++++-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
++++-+
++++-+def cp_to_target(src, dst, quiet=False):
++++-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
++++-+
++++-+def psqlc(command, db='', quiet=False, use_file=False):
++++-+    if not quiet: print(command)
++++-+    if use_file:
++++-+        with open('command.sql', 'w') as file: file.write(command)
++++-+    invocation = ['su', 'postgres', '-c']
++++-+    if use_file:
++++-+        invocation.append(f'psql {db} -f command.sql')
++++-+    else:
++++-+        invocation.append(f'psql {db} -c "{command}"')
++++-+    if getpass.getuser() != 'root':
++++-+        invocation.insert(0, 'sudo')
++++-+    invoke(*invocation, quiet=quiet)
++++-+
++++-+def psqlc_target(command, options='', quiet=False, use_file=False):
++++-+    if not quiet: print(command)
++++-+    if args.db_dry_sql: return
++++-+    if use_file:
++++-+        with open('command.sql', 'w') as file: file.write(command)
++++-+        cp_to_target('command.sql', '.', quiet=True)
++++-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
++++-+    separator = f'({UUID})'
++++-+    result = invoke_target(
++++-+        ' '.join([
++++-+            'docker exec portal2-backend-db',
++++-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
++++-+                    '-f command.sql' if use_file else f'-c "{command}"',
++++-+                    '-t',
++++-+                    '--no-align',
++++-+                    f'-F "{separator}"',
++++-+                    options,
++++-+        ]),
++++-+        stdout=True,
++++-+        quiet=True,
++++-+    )
++++-+    return [line.split(separator) for line in result.splitlines()]
++++-+
++++-+def dotenv_get(var):
++++-+    if os.environ[var]:
++++-+        return os.environ[var]
++++-+    with open(ENV_PATH) as env:
++++-+        lines = env.readlines()
++++-+    for line in lines:
++++-+        if line.startswith(var+'='):
++++-+            return line[len(var)+1:].strip()
++++-+
++++-+def git_state():
++++-+    diff = invoke('git diff', stdout=True)
++++-+    diff_cached = invoke('git diff --cached', stdout=True)
++++-+    with open('git-state', 'w') as git_state:
++++-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
++++-+        if diff:
++++-+            git_state.write('\n===== diff =====\n')
++++-+            git_state.write(diff+'\n')
++++-+        if diff_cached:
++++-+            git_state.write('\n===== diff --cached =====\n')
++++-+            git_state.write(diff_cached+'\n')
++++-+
++++- #===== main =====#
++++- if len(sys.argv) == 1:
++++-     parser.print_help()
++++-     sys.exit()
++++- 
++++-+if args.full_dev_setup:
++++-+    invoke('npm ci')
++++-+
++++-+if args.db_drop or args.db_fresh:
++++-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
++++-+
++++-+if args.db_user_drop or args.db_fresh:
++++-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
++++-+
++++-+if args.db_create or args.full_dev_setup or args.db_fresh:
++++-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
++++-+
++++-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
++++-+    db_user = dotenv_get('DB_USER')
++++-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
++++-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
++++-+
++++-+if args.full_dev_setup or args.db_fresh:
++++-+    invoke('npx sequelize-cli db:migrate')
++++-+
++++- if args.run:
++++-     invoke(f'npx nodemon src/index.js')
++++--elif args.sequelize_cli:
++++-+
++++-+if args.sequelize_cli:
++++-     invoke(f'npx sequelize-cli')
++++-+
++++-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
++++-+    git_state()
++++-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
++++-+    invoke(f'docker build -t {DOCKER_TAG} .')
++++-+
++++-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
++++-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++++-+    invoke(f'docker push {DOCKER_TAG}')
++++-+
++++-+if args.deploy_staging or args.deploy_production:
++++-+    invoke_target('mkdir bloomo', check=False)
++++-+    git_state()
++++-+    for i in [
++++-+        'do',
++++-+        'docker-compose.yml',
++++-+        'git-state',
++++-+        ENV_PATH
++++-+    ]:
++++-+        cp_to_target(i, 'bloomo')
++++-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++++-+    invoke_target(f'docker pull {DOCKER_TAG}')
++++-+    invoke_target(' '.join([
++++-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
++++-+        f'DOCKER_TAG={DOCKER_TAG}',
++++-+        f'STATIC_PATH={STATIC_PATH}',
++++-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
++++-+    ]))
++++-+    if not args.deploy_skip_migrate:
++++-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
++++-+    invoke_target('docker system prune --force')
++++-diff --git a/src/config/config.json b/src/config/config.json
++++-deleted file mode 100644
++++-index 3b6981b..0000000
++++---- a/src/config/config.json
++++-+++ /dev/null
++++-@@ -1,24 +0,0 @@
++++--{
++++--  "development": {
++++--    "username": "u_bloom",
++++--    "password": "king_1374",
++++--    "database": "bloom",
++++--    "host": "localhost",
++++--    "dialect": "postgres",
++++--    "define": {
++++--      "createdAt": "created_at",
++++--      "updatedAt": "updated_at"
++++--    }
++++--  },
++++--  "production": {
++++--    "username": "u-bloom",
++++--    "password": "QeOtLqfzR8Su$",
++++--    "database": "bloom",
++++--    "host": "localhost",
++++--    "dialect": "postgres",
++++--    "define": {
++++--      "createdAt": "created_at",
++++--      "updatedAt": "updated_at"
++++--    }
++++--  }
++++--}
++++-diff --git a/src/index.js b/src/index.js
++++-index 0b4526f..b7ab55f 100644
++++---- a/src/index.js
++++-+++ b/src/index.js
++++-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
++++- const ASSETS = require('./config/assets.json');
++++- 
++++- // CORS
++++--const origins = ['http://localhost:8080'];
++++-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
++++- 
++++- // HELPERS
++++- function asyncHandler(callback) {
++++-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
++++- const store = new SequelizeStore({ db: models.sequelize });
++++- store.sync();
++++- app.use(session({
++++--  name: 'x-auth',
++++--  secret: 'QeOtLqfzR8Su$',
++++-+  name: process.env.AUTHERIZATION_NAME,
++++-+  secret: process.env.AUTHERIZATION_SECRET,
++++-   store,
++++-   cookie: {
++++-     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
++++-diff --git a/src/models/index.js b/src/models/index.js
++++-index 9858aed..1c7d446 100644
++++---- a/src/models/index.js
++++-+++ b/src/models/index.js
++++-@@ -2,8 +2,8 @@ const fs = require('fs');
++++- const path = require('path');
++++- const Sequelize = require('sequelize');
++++- const basename = path.basename(__filename);
++++--const env = process.env.NODE_ENV || 'development';
++++--const config = require(__dirname + '/../config/config.json')[env];
++++-+const env = process.env.NODE_ENV;
++++-+const config = require(__dirname + '/../config/config.js')[env];
++++- const db = {};
++++- 
++++- let sequelize;
++++-diff --git a/src/utils.js b/src/utils.js
++++-index ea09824..adabc50 100644
++++---- a/src/utils.js
++++-+++ b/src/utils.js
++++-@@ -1,5 +1,5 @@
++++- const _ = require('lodash');
++++--const { utils } = require('Web3');
++++-+const { utils } = require('web3');
++++- const { getTime } = require('date-fns');
++++- 
++++- module.exports = {
+++++ ===== diff =====
+++++-diff --git a/.sequelizerc b/.sequelizerc
+++++-index 233b747..425db6b 100644
+++++---- a/.sequelizerc
+++++-+++ b/.sequelizerc
+++++-@@ -1,7 +1,7 @@
+++++- const path = require('path');
++++++diff --git a/git-state b/git-state
++++++index af62c51..8846a45 100644
++++++--- a/git-state
+++++++++ b/git-state
++++++@@ -1,424 +1,29 @@
++++++-commit 1d6249f175a33bbc4d11bf5bd16263fc67edfad4
+++++++commit b72ebf987e0ecff5e261b96c0ec57e2d2ba31bb2
++++++ Author: Ali Alizade Haqiqi <aliz@x-matik.com>
++++++-Date:   Sun Jul 4 02:40:38 2021 +0430
+++++++Date:   Sun Jul 11 18:48:16 2021 +0430
+++++  
+++++- module.exports = {
+++++--  config: path.resolve('src', 'config', 'config.json'),
+++++-+  config: path.resolve('src', 'config', 'config.js'),
+++++-   'models-path': path.resolve('src', 'models'),
+++++-   'migrations-path': path.resolve('src', 'migrations'),
+++++- };
+++++-diff --git a/do b/do
+++++-index a927286..75d54d3 100755
+++++---- a/do
+++++-+++ b/do
+++++-@@ -2,24 +2,79 @@
++++++-    power ups feature
+++++++    ready to deploy
++++++     
++++++     Signed-off-by: Ali Alizade Haqiqi <aliz@x-matik.com>
+++++  
+++++- #===== imports =====#
+++++- import argparse
+++++-+import collections
+++++- import copy
+++++- import datetime
+++++-+import getpass
+++++- import glob
+++++-+import hashlib
+++++-+import json
+++++-+import math
+++++- import os
+++++-+import pprint
+++++-+import random
+++++- import re
+++++-+import shutil
+++++- import subprocess
+++++- import sys
+++++-+import time
+++++- 
+++++- #===== args =====#
+++++- parser = argparse.ArgumentParser()
+++++-+# setup
+++++-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
+++++-+parser.add_argument('--db-create', '--dbc', action='store_true')
+++++-+parser.add_argument('--db-drop', '--dbd', action='store_true')
+++++-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
+++++-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
+++++-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
+++++-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
+++++-+
+++++-+# development
+++++- parser.add_argument('--run', '-r', action='store_true')
+++++- parser.add_argument('--sequelize-cli', '--seq', '-s')
+++++- 
+++++-+# deploy
+++++-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
+++++-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
+++++-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
+++++-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
+++++-+parser.add_argument('--deploy-skip-migrate', action='store_true')
+++++-+
+++++-+# config
+++++-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
+++++-+
+++++- args = parser.parse_args()
+++++- 
+++++-+if args.deploy_staging:
+++++-+    args.env = 'stag'
+++++-+elif args.deploy_production:
+++++-+    args.env = 'prod'
+++++-+
+++++- #===== consts =====#
+++++- DIR = os.path.dirname(os.path.realpath(__file__))
+++++- 
+++++-+DOCKER_REGISTRY = 'registry.bloomo.app'
+++++-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
+++++-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
+++++-+
+++++-+STATIC_PATH = '/bloomo/static'
+++++-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
+++++-+
+++++-+if args.env == 'dev':
+++++-+    ENV_PATH = '.env'
+++++-+    ORIGIN = 'http://localhost:8004'
+++++-+elif args.env == 'stag':
+++++-+    ENV_PATH = '.env.stag'
+++++-+    HOSTNAME = 'staging.bloomo.app'
+++++-+elif args.env == 'prod':
+++++-+    ENV_PATH = '.env.prod'
+++++-+    HOSTNAME = 'bloomo.app'
+++++-+
+++++-+if args.env in ['stag', 'prod']:
+++++-+    ORIGIN = f'https://{HOSTNAME}'
+++++-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
+++++-+
+++++- #===== setup =====#
+++++- os.chdir(DIR)
+++++- 
+++++-@@ -27,6 +82,71 @@ os.chdir(DIR)
+++++- def blue(text):
+++++-     return '\x1b[34m' + text + '\x1b[0m'
+++++- 
+++++-+def print_styled(string, end=None, style=None):
+++++-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
+++++-+    def replace(match):
+++++-+        if match.group(2) == '/': return match.group()
+++++-+        if match.group(1) == '/': return '\x1b[0m'
+++++-+        split = match.group(2).split('-')
+++++-+        while len(split) < 2: split.append('none')
+++++-+        color = split[0]
+++++-+        background = split[1]
+++++-+        decorations = split[2:]
+++++-+        if color.startswith('#'):
+++++-+            color = f'\x1b[38;5;{color[1:]}m'
+++++-+        else: color = {
+++++-+            'black': '\x1b[30m',
+++++-+            'red': '\x1b[31m',
+++++-+            'green': '\x1b[32m',
+++++-+            'yellow': '\x1b[33m',
+++++-+            'blue': '\x1b[34m',
+++++-+            'magenta': '\x1b[35m',
+++++-+            'cyan': '\x1b[36m',
+++++-+            'white': '\x1b[37m',
+++++-+            'lightblack': '\x1b[30;1m',
+++++-+            'lightred': '\x1b[31;1m',
+++++-+            'lightyellow': '\x1b[33;1m',
+++++-+            'lightgreen': '\x1b[32;1m',
+++++-+            'lightblue': '\x1b[34;1m',
+++++-+            'lightmagenta': '\x1b[35;1m',
+++++-+            'lightcyan': '\x1b[36;1m',
+++++-+            'lightwhite': '\x1b[37;1m',
+++++-+            'none': '',
+++++-+        }[color]
+++++-+        if background.startswith('#'):
+++++-+            background = f'\x1b[48;5;{background[1:]}m'
+++++-+        else: background = {
+++++-+            'black': '\x1b[40m',
+++++-+            'red': '\x1b[41m',
+++++-+            'green': '\x1b[42m',
+++++-+            'yellow': '\x1b[43m',
+++++-+            'blue': '\x1b[44m',
+++++-+            'magenta': '\x1b[45m',
+++++-+            'cyan': '\x1b[46m',
+++++-+            'white': '\x1b[47m',
+++++-+            'lightblack': '\x1b[40;1m',
+++++-+            'lightred': '\x1b[41;1m',
+++++-+            'lightyellow': '\x1b[43;1m',
+++++-+            'lightgreen': '\x1b[42;1m',
+++++-+            'lightblue': '\x1b[44;1m',
+++++-+            'lightmagenta': '\x1b[45;1m',
+++++-+            'lightcyan': '\x1b[46;1m',
+++++-+            'lightwhite': '\x1b[47;1m',
+++++-+            'none': '',
+++++-+        }[background]
+++++-+        decorations = ''.join([
+++++-+            {
+++++-+                'bold': '\x1b[1m',
+++++-+                'underlined': '\x1b[4m',
+++++-+                'reversed': '\x1b[7m',
+++++-+                'none': '',
+++++-+            }[i]
+++++-+            for i in decorations
+++++-+        ])
+++++-+        return color + background + decorations
+++++-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
+++++-+    return re.sub('<(/?)(.*?)>', '', string)
+++++-+
+++++- def timestamp():
+++++-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
+++++- 
+++++-@@ -44,15 +164,16 @@ def invoke(
+++++-         print(blue('-'*40))
+++++-         print(timestamp())
+++++-         print(os.getcwd()+'$', end=' ')
+++++--        for i, v in enumerate(args):
+++++--            if re.search(r'\s', v):
+++++--                v = v.replace("'", """ '"'"' """.strip())
+++++--                v = f"'{v}'"
+++++--            if i != len(args)-1:
+++++--                end = ' '
+++++--            else:
+++++--                end = ';\n'
+++++--            print(v, end=end)
+++++-+        if any([re.search(r'\s', i) for i in args]):
+++++-+            print()
+++++-+            for i in args: print(f'\t{i} \\')
+++++-+        else:
+++++-+            for i, v in enumerate(args):
+++++-+                if i != len(args)-1:
+++++-+                    end = ' '
+++++-+                else:
+++++-+                    end = ';\n'
+++++-+                print(v, end=end)
+++++-         if kwargs: print(kwargs)
+++++-         if popen: print('popen')
+++++-         print()
+++++-@@ -67,15 +188,131 @@ def invoke(
+++++-         if stdout: kwargs['capture_output'] = True
+++++-         result = subprocess.run(args, **kwargs)
+++++-         if stdout:
+++++--            result = result.stdout.decode('utf-8').strip()
+++++-+            result = result.stdout.decode('utf-8')
+++++-+            if stdout != 'exact': result = result.strip()
+++++-         return result
+++++- 
+++++-+def invoke_target(*args, **kwargs):
+++++-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
+++++-+
+++++-+def cp_to_target(src, dst, quiet=False):
+++++-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
+++++-+
+++++-+def psqlc(command, db='', quiet=False, use_file=False):
+++++-+    if not quiet: print(command)
+++++-+    if use_file:
+++++-+        with open('command.sql', 'w') as file: file.write(command)
+++++-+    invocation = ['su', 'postgres', '-c']
+++++-+    if use_file:
+++++-+        invocation.append(f'psql {db} -f command.sql')
+++++-+    else:
+++++-+        invocation.append(f'psql {db} -c "{command}"')
+++++-+    if getpass.getuser() != 'root':
+++++-+        invocation.insert(0, 'sudo')
+++++-+    invoke(*invocation, quiet=quiet)
+++++-+
+++++-+def psqlc_target(command, options='', quiet=False, use_file=False):
+++++-+    if not quiet: print(command)
+++++-+    if args.db_dry_sql: return
+++++-+    if use_file:
+++++-+        with open('command.sql', 'w') as file: file.write(command)
+++++-+        cp_to_target('command.sql', '.', quiet=True)
+++++-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
+++++-+    separator = f'({UUID})'
+++++-+    result = invoke_target(
+++++-+        ' '.join([
+++++-+            'docker exec portal2-backend-db',
+++++-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
+++++-+                    '-f command.sql' if use_file else f'-c "{command}"',
+++++-+                    '-t',
+++++-+                    '--no-align',
+++++-+                    f'-F "{separator}"',
+++++-+                    options,
+++++-+        ]),
+++++-+        stdout=True,
+++++-+        quiet=True,
+++++-+    )
+++++-+    return [line.split(separator) for line in result.splitlines()]
+++++-+
+++++-+def dotenv_get(var):
+++++-+    if os.environ[var]:
+++++-+        return os.environ[var]
+++++-+    with open(ENV_PATH) as env:
+++++-+        lines = env.readlines()
+++++-+    for line in lines:
+++++-+        if line.startswith(var+'='):
+++++-+            return line[len(var)+1:].strip()
+++++-+
+++++-+def git_state():
+++++-+    diff = invoke('git diff', stdout=True)
+++++-+    diff_cached = invoke('git diff --cached', stdout=True)
+++++-+    with open('git-state', 'w') as git_state:
+++++-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
+++++-+        if diff:
+++++-+            git_state.write('\n===== diff =====\n')
+++++-+            git_state.write(diff+'\n')
+++++-+        if diff_cached:
+++++-+            git_state.write('\n===== diff --cached =====\n')
+++++-+            git_state.write(diff_cached+'\n')
+++++-+
+++++- #===== main =====#
+++++- if len(sys.argv) == 1:
+++++-     parser.print_help()
+++++-     sys.exit()
+++++- 
+++++-+if args.full_dev_setup:
+++++-+    invoke('npm ci')
+++++-+
+++++-+if args.db_drop or args.db_fresh:
+++++-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
+++++-+
+++++-+if args.db_user_drop or args.db_fresh:
+++++-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
+++++-+
+++++-+if args.db_create or args.full_dev_setup or args.db_fresh:
+++++-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
+++++-+
+++++-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
+++++-+    db_user = dotenv_get('DB_USER')
+++++-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
+++++-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
+++++-+
+++++-+if args.full_dev_setup or args.db_fresh:
+++++-+    invoke('npx sequelize-cli db:migrate')
+++++-+
+++++- if args.run:
+++++-     invoke(f'npx nodemon src/index.js')
+++++--elif args.sequelize_cli:
+++++-+
+++++-+if args.sequelize_cli:
+++++-     invoke(f'npx sequelize-cli')
+++++-+
+++++-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
+++++-+    git_state()
+++++-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
+++++-+    invoke(f'docker build -t {DOCKER_TAG} .')
+++++-+
+++++-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
+++++-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+++++-+    invoke(f'docker push {DOCKER_TAG}')
+++++-+
+++++-+if args.deploy_staging or args.deploy_production:
+++++-+    invoke_target('mkdir bloomo', check=False)
+++++-+    git_state()
+++++-+    for i in [
+++++-+        'do',
+++++-+        'docker-compose.yml',
+++++-+        'git-state',
+++++-+        ENV_PATH
+++++-+    ]:
+++++-+        cp_to_target(i, 'bloomo')
+++++-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
+++++-+    invoke_target(f'docker pull {DOCKER_TAG}')
+++++-+    invoke_target(' '.join([
+++++-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
+++++-+        f'DOCKER_TAG={DOCKER_TAG}',
+++++-+        f'STATIC_PATH={STATIC_PATH}',
+++++-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
+++++-+    ]))
+++++-+    if not args.deploy_skip_migrate:
+++++-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
+++++-+    invoke_target('docker system prune --force')
+++++-diff --git a/src/config/config.json b/src/config/config.json
+++++-deleted file mode 100644
+++++-index 3b6981b..0000000
+++++---- a/src/config/config.json
+++++-+++ /dev/null
+++++-@@ -1,24 +0,0 @@
+++++--{
+++++--  "development": {
+++++--    "username": "u_bloom",
+++++--    "password": "king_1374",
+++++--    "database": "bloom",
+++++--    "host": "localhost",
+++++--    "dialect": "postgres",
+++++--    "define": {
+++++--      "createdAt": "created_at",
+++++--      "updatedAt": "updated_at"
+++++--    }
+++++--  },
+++++--  "production": {
+++++--    "username": "u-bloom",
+++++--    "password": "QeOtLqfzR8Su$",
+++++--    "database": "bloom",
+++++--    "host": "localhost",
+++++--    "dialect": "postgres",
+++++--    "define": {
+++++--      "createdAt": "created_at",
+++++--      "updatedAt": "updated_at"
+++++--    }
+++++--  }
+++++--}
+++++-diff --git a/src/index.js b/src/index.js
+++++-index 0b4526f..b7ab55f 100644
+++++---- a/src/index.js
+++++-+++ b/src/index.js
+++++-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
+++++- const ASSETS = require('./config/assets.json');
+++++- 
+++++- // CORS
+++++--const origins = ['http://localhost:8080'];
+++++-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
+++++- 
+++++- // HELPERS
+++++- function asyncHandler(callback) {
+++++-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
+++++- const store = new SequelizeStore({ db: models.sequelize });
+++++- store.sync();
+++++- app.use(session({
+++++--  name: 'x-auth',
+++++--  secret: 'QeOtLqfzR8Su$',
+++++-+  name: process.env.AUTHERIZATION_NAME,
+++++-+  secret: process.env.AUTHERIZATION_SECRET,
+++++-   store,
+++++-   cookie: {
+++++-     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
+++++-diff --git a/src/models/index.js b/src/models/index.js
+++++-index 9858aed..1c7d446 100644
+++++---- a/src/models/index.js
+++++-+++ b/src/models/index.js
+++++-@@ -2,8 +2,8 @@ const fs = require('fs');
+++++- const path = require('path');
+++++- const Sequelize = require('sequelize');
+++++- const basename = path.basename(__filename);
+++++--const env = process.env.NODE_ENV || 'development';
+++++--const config = require(__dirname + '/../config/config.json')[env];
+++++-+const env = process.env.NODE_ENV;
+++++-+const config = require(__dirname + '/../config/config.js')[env];
+++++- const db = {};
+++++- 
+++++- let sequelize;
+++++-diff --git a/src/utils.js b/src/utils.js
+++++-index ea09824..adabc50 100644
+++++---- a/src/utils.js
+++++-+++ b/src/utils.js
+++++-@@ -1,5 +1,5 @@
+++++- const _ = require('lodash');
+++++--const { utils } = require('Web3');
+++++-+const { utils } = require('web3');
+++++- const { getTime } = require('date-fns');
+++++- 
+++++- module.exports = {
+++++++.sequelizerc
+++++++Dockerfile
+++++++do
+++++++docker-compose.yml
+++++++env/dev
+++++++env/env
+++++++git-state
+++++++package-lock.json
+++++++package.json
+++++++src/config/assets.js
+++++++src/config/assets.json
+++++++src/config/config.json
+++++++src/config/db.js
+++++++src/config/index.js
+++++++src/env.js
++++++ src/index.js
++++++ src/integrations/foundation/index.js
++++++-src/migrations/20210703195624-add-index-renewed_at-in-artworks.js
++++++-src/models/artworks.js
+++++++src/integrations/foundation/methods.js
+++++++src/integrations/foundation/methods.json
+++++++src/models/index.js
++++++ src/utils.js
++++++-
++++++-===== diff =====
++++++-diff --git a/.sequelizerc b/.sequelizerc
++++++-index 233b747..425db6b 100644
++++++---- a/.sequelizerc
++++++-+++ b/.sequelizerc
++++++-@@ -1,7 +1,7 @@
++++++- const path = require('path');
++++++- 
++++++- module.exports = {
++++++--  config: path.resolve('src', 'config', 'config.json'),
++++++-+  config: path.resolve('src', 'config', 'config.js'),
++++++-   'models-path': path.resolve('src', 'models'),
++++++-   'migrations-path': path.resolve('src', 'migrations'),
++++++- };
++++++-diff --git a/do b/do
++++++-index a927286..75d54d3 100755
++++++---- a/do
++++++-+++ b/do
++++++-@@ -2,24 +2,79 @@
++++++- 
++++++- #===== imports =====#
++++++- import argparse
++++++-+import collections
++++++- import copy
++++++- import datetime
++++++-+import getpass
++++++- import glob
++++++-+import hashlib
++++++-+import json
++++++-+import math
++++++- import os
++++++-+import pprint
++++++-+import random
++++++- import re
++++++-+import shutil
++++++- import subprocess
++++++- import sys
++++++-+import time
++++++- 
++++++- #===== args =====#
++++++- parser = argparse.ArgumentParser()
++++++-+# setup
++++++-+parser.add_argument('--full-dev-setup', '--fds', action='store_true')
++++++-+parser.add_argument('--db-create', '--dbc', action='store_true')
++++++-+parser.add_argument('--db-drop', '--dbd', action='store_true')
++++++-+parser.add_argument('--db-user-create', '--dbuc', action='store_true')
++++++-+parser.add_argument('--db-user-drop', '--dbud', action='store_true')
++++++-+parser.add_argument('--db-fresh', '--dbf', action='store_true')
++++++-+parser.add_argument('--db-migrate', '--dbm', action='store_true')
++++++-+
++++++-+# development
++++++- parser.add_argument('--run', '-r', action='store_true')
++++++- parser.add_argument('--sequelize-cli', '--seq', '-s')
++++++- 
++++++-+# deploy
++++++-+parser.add_argument('--docker-build', '--dkrb', action='store_true')
++++++-+parser.add_argument('--docker-push', '--dkrp', action='store_true')
++++++-+parser.add_argument('--deploy-staging', '--ds', choices=['only'], nargs='?', const=True)
++++++-+parser.add_argument('--deploy-production', '--dp', choices=['only'], nargs='?', const=True)
++++++-+parser.add_argument('--deploy-skip-migrate', action='store_true')
++++++-+
++++++-+# config
++++++-+parser.add_argument('--env', '-e', choices=['dev', 'stag', 'prod'], default='dev')
++++++-+
++++++- args = parser.parse_args()
++++++- 
++++++-+if args.deploy_staging:
++++++-+    args.env = 'stag'
++++++-+elif args.deploy_production:
++++++-+    args.env = 'prod'
++++++-+
++++++- #===== consts =====#
++++++- DIR = os.path.dirname(os.path.realpath(__file__))
++++++- 
++++++-+DOCKER_REGISTRY = 'registry.bloomo.app'
++++++-+DOCKER_REGISTRY_PW = 'QeOtLqfzR8Su$'
++++++-+DOCKER_TAG = f'{DOCKER_REGISTRY}/bloomo-backend-{args.env}'
++++++-+
++++++-+STATIC_PATH = '/bloomo/static'
++++++-+POSTGRES_DATA_PATH = '/mnt/postgres-data'
++++++-+
++++++-+if args.env == 'dev':
++++++-+    ENV_PATH = '.env'
++++++-+    ORIGIN = 'http://localhost:8004'
++++++-+elif args.env == 'stag':
++++++-+    ENV_PATH = '.env.stag'
++++++-+    HOSTNAME = 'staging.bloomo.app'
++++++-+elif args.env == 'prod':
++++++-+    ENV_PATH = '.env.prod'
++++++-+    HOSTNAME = 'bloomo.app'
++++++-+
++++++-+if args.env in ['stag', 'prod']:
++++++-+    ORIGIN = f'https://{HOSTNAME}'
++++++-+    USER_AT_HOSTNAME = f'root@{HOSTNAME}'
++++++-+
++++++- #===== setup =====#
++++++- os.chdir(DIR)
++++++- 
++++++-@@ -27,6 +82,71 @@ os.chdir(DIR)
++++++- def blue(text):
++++++-     return '\x1b[34m' + text + '\x1b[0m'
++++++- 
++++++-+def print_styled(string, end=None, style=None):
++++++-+    if style: return print_styled(f'<{style}>{string}</>', end=end)
++++++-+    def replace(match):
++++++-+        if match.group(2) == '/': return match.group()
++++++-+        if match.group(1) == '/': return '\x1b[0m'
++++++-+        split = match.group(2).split('-')
++++++-+        while len(split) < 2: split.append('none')
++++++-+        color = split[0]
++++++-+        background = split[1]
++++++-+        decorations = split[2:]
++++++-+        if color.startswith('#'):
++++++-+            color = f'\x1b[38;5;{color[1:]}m'
++++++-+        else: color = {
++++++-+            'black': '\x1b[30m',
++++++-+            'red': '\x1b[31m',
++++++-+            'green': '\x1b[32m',
++++++-+            'yellow': '\x1b[33m',
++++++-+            'blue': '\x1b[34m',
++++++-+            'magenta': '\x1b[35m',
++++++-+            'cyan': '\x1b[36m',
++++++-+            'white': '\x1b[37m',
++++++-+            'lightblack': '\x1b[30;1m',
++++++-+            'lightred': '\x1b[31;1m',
++++++-+            'lightyellow': '\x1b[33;1m',
++++++-+            'lightgreen': '\x1b[32;1m',
++++++-+            'lightblue': '\x1b[34;1m',
++++++-+            'lightmagenta': '\x1b[35;1m',
++++++-+            'lightcyan': '\x1b[36;1m',
++++++-+            'lightwhite': '\x1b[37;1m',
++++++-+            'none': '',
++++++-+        }[color]
++++++-+        if background.startswith('#'):
++++++-+            background = f'\x1b[48;5;{background[1:]}m'
++++++-+        else: background = {
++++++-+            'black': '\x1b[40m',
++++++-+            'red': '\x1b[41m',
++++++-+            'green': '\x1b[42m',
++++++-+            'yellow': '\x1b[43m',
++++++-+            'blue': '\x1b[44m',
++++++-+            'magenta': '\x1b[45m',
++++++-+            'cyan': '\x1b[46m',
++++++-+            'white': '\x1b[47m',
++++++-+            'lightblack': '\x1b[40;1m',
++++++-+            'lightred': '\x1b[41;1m',
++++++-+            'lightyellow': '\x1b[43;1m',
++++++-+            'lightgreen': '\x1b[42;1m',
++++++-+            'lightblue': '\x1b[44;1m',
++++++-+            'lightmagenta': '\x1b[45;1m',
++++++-+            'lightcyan': '\x1b[46;1m',
++++++-+            'lightwhite': '\x1b[47;1m',
++++++-+            'none': '',
++++++-+        }[background]
++++++-+        decorations = ''.join([
++++++-+            {
++++++-+                'bold': '\x1b[1m',
++++++-+                'underlined': '\x1b[4m',
++++++-+                'reversed': '\x1b[7m',
++++++-+                'none': '',
++++++-+            }[i]
++++++-+            for i in decorations
++++++-+        ])
++++++-+        return color + background + decorations
++++++-+    print(re.sub('<(/?)(.*?)>', replace, string) + '\x1b[0m', end=end)
++++++-+    return re.sub('<(/?)(.*?)>', '', string)
++++++-+
++++++- def timestamp():
++++++-     return '{:%Y-%m-%d %H:%M:%S.%f}'.format(datetime.datetime.now())
++++++- 
++++++-@@ -44,15 +164,16 @@ def invoke(
++++++-         print(blue('-'*40))
++++++-         print(timestamp())
++++++-         print(os.getcwd()+'$', end=' ')
++++++--        for i, v in enumerate(args):
++++++--            if re.search(r'\s', v):
++++++--                v = v.replace("'", """ '"'"' """.strip())
++++++--                v = f"'{v}'"
++++++--            if i != len(args)-1:
++++++--                end = ' '
++++++--            else:
++++++--                end = ';\n'
++++++--            print(v, end=end)
++++++-+        if any([re.search(r'\s', i) for i in args]):
++++++-+            print()
++++++-+            for i in args: print(f'\t{i} \\')
++++++-+        else:
++++++-+            for i, v in enumerate(args):
++++++-+                if i != len(args)-1:
++++++-+                    end = ' '
++++++-+                else:
++++++-+                    end = ';\n'
++++++-+                print(v, end=end)
++++++-         if kwargs: print(kwargs)
++++++-         if popen: print('popen')
++++++-         print()
++++++-@@ -67,15 +188,131 @@ def invoke(
++++++-         if stdout: kwargs['capture_output'] = True
++++++-         result = subprocess.run(args, **kwargs)
++++++-         if stdout:
++++++--            result = result.stdout.decode('utf-8').strip()
++++++-+            result = result.stdout.decode('utf-8')
++++++-+            if stdout != 'exact': result = result.strip()
++++++-         return result
++++++- 
++++++-+def invoke_target(*args, **kwargs):
++++++-+    return invoke('ssh', USER_AT_HOSTNAME, ' '.join(args), **kwargs)
++++++-+
++++++-+def cp_to_target(src, dst, quiet=False):
++++++-+    invoke('scp', src, f'{USER_AT_HOSTNAME}:{dst}', quiet=quiet, stdout=quiet)
++++++-+
++++++-+def psqlc(command, db='', quiet=False, use_file=False):
++++++-+    if not quiet: print(command)
++++++-+    if use_file:
++++++-+        with open('command.sql', 'w') as file: file.write(command)
++++++-+    invocation = ['su', 'postgres', '-c']
++++++-+    if use_file:
++++++-+        invocation.append(f'psql {db} -f command.sql')
++++++-+    else:
++++++-+        invocation.append(f'psql {db} -c "{command}"')
++++++-+    if getpass.getuser() != 'root':
++++++-+        invocation.insert(0, 'sudo')
++++++-+    invoke(*invocation, quiet=quiet)
++++++-+
++++++-+def psqlc_target(command, options='', quiet=False, use_file=False):
++++++-+    if not quiet: print(command)
++++++-+    if args.db_dry_sql: return
++++++-+    if use_file:
++++++-+        with open('command.sql', 'w') as file: file.write(command)
++++++-+        cp_to_target('command.sql', '.', quiet=True)
++++++-+        invoke_target('docker cp command.sql portal2-backend-db:command.sql', quiet=True)
++++++-+    separator = f'({UUID})'
++++++-+    result = invoke_target(
++++++-+        ' '.join([
++++++-+            'docker exec portal2-backend-db',
++++++-+                f'psql {dotenv_get("DB")} {dotenv_get("DB_USER")}',
++++++-+                    '-f command.sql' if use_file else f'-c "{command}"',
++++++-+                    '-t',
++++++-+                    '--no-align',
++++++-+                    f'-F "{separator}"',
++++++-+                    options,
++++++-+        ]),
++++++-+        stdout=True,
++++++-+        quiet=True,
++++++-+    )
++++++-+    return [line.split(separator) for line in result.splitlines()]
++++++-+
++++++-+def dotenv_get(var):
++++++-+    if os.environ[var]:
++++++-+        return os.environ[var]
++++++-+    with open(ENV_PATH) as env:
++++++-+        lines = env.readlines()
++++++-+    for line in lines:
++++++-+        if line.startswith(var+'='):
++++++-+            return line[len(var)+1:].strip()
++++++-+
++++++-+def git_state():
++++++-+    diff = invoke('git diff', stdout=True)
++++++-+    diff_cached = invoke('git diff --cached', stdout=True)
++++++-+    with open('git-state', 'w') as git_state:
++++++-+        git_state.write(invoke('git show --name-only', stdout=True)+'\n')
++++++-+        if diff:
++++++-+            git_state.write('\n===== diff =====\n')
++++++-+            git_state.write(diff+'\n')
++++++-+        if diff_cached:
++++++-+            git_state.write('\n===== diff --cached =====\n')
++++++-+            git_state.write(diff_cached+'\n')
++++++-+
++++++- #===== main =====#
++++++- if len(sys.argv) == 1:
++++++-     parser.print_help()
++++++-     sys.exit()
++++++- 
++++++-+if args.full_dev_setup:
++++++-+    invoke('npm ci')
++++++-+
++++++-+if args.db_drop or args.db_fresh:
++++++-+    psqlc(f'DROP DATABASE {dotenv_get("DB")}')
++++++-+
++++++-+if args.db_user_drop or args.db_fresh:
++++++-+    psqlc(f'DROP USER {dotenv_get("DB_USER")}')
++++++-+
++++++-+if args.db_create or args.full_dev_setup or args.db_fresh:
++++++-+    psqlc(f'CREATE DATABASE {dotenv_get("DB")};')
++++++-+
++++++-+if args.db_user_create or args.full_dev_setup or args.db_fresh:
++++++-+    db_user = dotenv_get('DB_USER')
++++++-+    psqlc(f'''CREATE USER {db_user} WITH PASSWORD '{dotenv_get("DB_PW")}';''')
++++++-+    psqlc(f'GRANT ALL PRIVILEGES ON DATABASE {dotenv_get("DB")} TO {db_user};')
++++++-+
++++++-+if args.full_dev_setup or args.db_fresh:
++++++-+    invoke('npx sequelize-cli db:migrate')
++++++-+
++++++- if args.run:
++++++-     invoke(f'npx nodemon src/index.js')
++++++--elif args.sequelize_cli:
++++++-+
++++++-+if args.sequelize_cli:
++++++-     invoke(f'npx sequelize-cli')
++++++-+
++++++-+if args.docker_build or args.deploy_staging == True or args.deploy_production == True:
++++++-+    git_state()
++++++-+    invoke(f'docker image rm {DOCKER_TAG}', check=False)
++++++-+    invoke(f'docker build -t {DOCKER_TAG} .')
++++++-+
++++++-+if args.docker_push or args.deploy_staging == True or args.deploy_production == True:
++++++-+    invoke(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++++++-+    invoke(f'docker push {DOCKER_TAG}')
++++++-+
++++++-+if args.deploy_staging or args.deploy_production:
++++++-+    invoke_target('mkdir bloomo', check=False)
++++++-+    git_state()
++++++-+    for i in [
++++++-+        'do',
++++++-+        'docker-compose.yml',
++++++-+        'git-state',
++++++-+        ENV_PATH
++++++-+    ]:
++++++-+        cp_to_target(i, 'bloomo')
++++++-+    invoke_target(f'docker login -u bloomo -p {DOCKER_REGISTRY_PW} {DOCKER_REGISTRY}')
++++++-+    invoke_target(f'docker pull {DOCKER_TAG}')
++++++-+    invoke_target(' '.join([
++++++-+        f'POSTGRES_DATA_PATH={POSTGRES_DATA_PATH}',
++++++-+        f'DOCKER_TAG={DOCKER_TAG}',
++++++-+        f'STATIC_PATH={STATIC_PATH}',
++++++-+        f'docker-compose --env-file ~/bloomo/{ENV_PATH} -f ~/bloomo/docker-compose.yml up -d',
++++++-+    ]))
++++++-+    if not args.deploy_skip_migrate:
++++++-+        invoke_target(f'docker exec bloomo-main npx sequelize-cli db:migrate')
++++++-+    invoke_target('docker system prune --force')
++++++-diff --git a/src/config/config.json b/src/config/config.json
++++++-deleted file mode 100644
++++++-index 3b6981b..0000000
++++++---- a/src/config/config.json
++++++-+++ /dev/null
++++++-@@ -1,24 +0,0 @@
++++++--{
++++++--  "development": {
++++++--    "username": "u_bloom",
++++++--    "password": "king_1374",
++++++--    "database": "bloom",
++++++--    "host": "localhost",
++++++--    "dialect": "postgres",
++++++--    "define": {
++++++--      "createdAt": "created_at",
++++++--      "updatedAt": "updated_at"
++++++--    }
++++++--  },
++++++--  "production": {
++++++--    "username": "u-bloom",
++++++--    "password": "QeOtLqfzR8Su$",
++++++--    "database": "bloom",
++++++--    "host": "localhost",
++++++--    "dialect": "postgres",
++++++--    "define": {
++++++--      "createdAt": "created_at",
++++++--      "updatedAt": "updated_at"
++++++--    }
++++++--  }
++++++--}
++++++-diff --git a/src/index.js b/src/index.js
++++++-index 0b4526f..b7ab55f 100644
++++++---- a/src/index.js
++++++-+++ b/src/index.js
++++++-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
++++++- const ASSETS = require('./config/assets.json');
++++++- 
++++++- // CORS
++++++--const origins = ['http://localhost:8080'];
++++++-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
++++++- 
++++++- // HELPERS
++++++- function asyncHandler(callback) {
++++++-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
++++++- const store = new SequelizeStore({ db: models.sequelize });
++++++- store.sync();
++++++- app.use(session({
++++++--  name: 'x-auth',
++++++--  secret: 'QeOtLqfzR8Su$',
++++++-+  name: process.env.AUTHERIZATION_NAME,
++++++-+  secret: process.env.AUTHERIZATION_SECRET,
++++++-   store,
++++++-   cookie: {
++++++-     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
++++++-diff --git a/src/models/index.js b/src/models/index.js
++++++-index 9858aed..1c7d446 100644
++++++---- a/src/models/index.js
++++++-+++ b/src/models/index.js
++++++-@@ -2,8 +2,8 @@ const fs = require('fs');
++++++- const path = require('path');
++++++- const Sequelize = require('sequelize');
++++++- const basename = path.basename(__filename);
++++++--const env = process.env.NODE_ENV || 'development';
++++++--const config = require(__dirname + '/../config/config.json')[env];
++++++-+const env = process.env.NODE_ENV;
++++++-+const config = require(__dirname + '/../config/config.js')[env];
++++++- const db = {};
++++++- 
++++++- let sequelize;
++++++-diff --git a/src/utils.js b/src/utils.js
++++++-index ea09824..adabc50 100644
++++++---- a/src/utils.js
++++++-+++ b/src/utils.js
++++++-@@ -1,5 +1,5 @@
++++++- const _ = require('lodash');
++++++--const { utils } = require('Web3');
++++++-+const { utils } = require('web3');
++++++- const { getTime } = require('date-fns');
++++++- 
++++++- module.exports = {
 diff --git a/src/index.js b/src/index.js
-index 0b4526f..b7ab55f 100644
+index 53e0bf2..2ebeb0d 100644
 --- a/src/index.js
 +++ b/src/index.js
-@@ -16,7 +16,7 @@ const { foundation, price } = require('./integrations');
- const ASSETS = require('./config/assets.json');
+@@ -15,17 +15,7 @@ const { foundation, price } = require('./integrations');
+ 
+ const config = require('./config');
  
- // CORS
--const origins = ['http://localhost:8080'];
-+const origins = [`http://localhost:${process.env.BLOOMO_PORT}`];
+-// CORS
+-const origins = [];
+-if (process.env.NODE_ENV !== 'production') origins.push(`http://localhost:${process.env.BLOOMO_PORT}`);
+-else {
+-  origins.push('https://loomo.app');
+-}
+-
+-// SESSION
+-const SequelizeStore = connectSessionSequelize(session.Store);
+-const store = new SequelizeStore({ db: models.sequelize });
+-store.sync();
++app.disable('x-powered-by');
  
  // HELPERS
  function asyncHandler(callback) {
-@@ -62,8 +62,8 @@ const SequelizeStore = connectSessionSequelize(session.Store);
- const store = new SequelizeStore({ db: models.sequelize });
- store.sync();
+@@ -66,6 +56,13 @@ passport.deserializeUser(async (id, done) => {
+   }
+ });
+ 
++// STATIC
++app.use(express.static('static'));
++
++// SESSION
++const SequelizeStore = connectSessionSequelize(session.Store);
++const store = new SequelizeStore({ db: models.sequelize });
++store.sync();
  app.use(session({
--  name: 'x-auth',
--  secret: 'QeOtLqfzR8Su$',
-+  name: process.env.AUTHERIZATION_NAME,
-+  secret: process.env.AUTHERIZATION_SECRET,
-   store,
+   name: 'bloomo-auth',
+   secret: process.env.SESSION_SECRET,
+@@ -73,29 +70,41 @@ app.use(session({
    cookie: {
      sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
-diff --git a/src/models/index.js b/src/models/index.js
-index 9858aed..1c7d446 100644
---- a/src/models/index.js
-+++ b/src/models/index.js
-@@ -2,8 +2,8 @@ const fs = require('fs');
- const path = require('path');
- const Sequelize = require('sequelize');
- const basename = path.basename(__filename);
--const env = process.env.NODE_ENV || 'development';
--const config = require(__dirname + '/../config/config.json')[env];
-+const env = process.env.NODE_ENV;
-+const config = require(__dirname + '/../config/config.js')[env];
- const db = {};
+     httpOnly: false,
+-    secure: ['staging', 'production'].includes(process.env.NODE_ENV),
++    secure: false,
+     maxAge: 7 * 24 * 60 * 60 * 1000,
+   },
+   resave: false,
+   saveUninitialized: false,
+ }));
+-app.disable('x-powered-by');
++
++// JSON
+ app.use(bodyParser.json());
+-app.use((req, res, next) => {
+-  res.set('Cache-Control', 'no-store');
+-  next();
+-});
+-app.use(express.raw({ limit: '200MB' }));
++
++// PASSPORT
+ app.use(passport.initialize());
+ app.use(passport.session());
++
++// CORS
++const origins = [];
++if (process.env.NODE_ENV !== 'production') origins.push('http://localhost:8080');
++else {
++  origins.push('https://bloomo.app');
++}
+ app.use(cors({
+   origin: origins,
+   credentials: true,
+ }));
+ 
+-// static
+-app.use(express.static('static'));
++// NO CACHING
++app.use((req, res, next) => {
++  res.set('Cache-Control', 'no-store');
++  next();
++});
++
++// RAW
++app.use(express.raw({ limit: '200MB' }));
+ 
++// AUTH ROUTES
+ const authRouter = express.Router();
+ 
+ authRouter.post(
+@@ -118,6 +127,7 @@ authRouter.post(
+   },
+ );
  
- let sequelize;
-diff --git a/src/utils.js b/src/utils.js
-index ea09824..adabc50 100644
---- a/src/utils.js
-+++ b/src/utils.js
-@@ -1,5 +1,5 @@
- const _ = require('lodash');
--const { utils } = require('Web3');
-+const { utils } = require('web3');
- const { getTime } = require('date-fns');
++// REGULAR ROUTES
+ const regularRouter = express.Router();
  
- module.exports = {
+ regularRouter.get('/user/current', asyncHandler(async (req, res) => {
diff --git a/src/index.js b/src/index.js
index 53e0bf2..2ebeb0d 100644
--- a/src/index.js
+++ b/src/index.js
@@ -15,17 +15,7 @@ const { foundation, price } = require('./integrations');
 
 const config = require('./config');
 
-// CORS
-const origins = [];
-if (process.env.NODE_ENV !== 'production') origins.push(`http://localhost:${process.env.BLOOMO_PORT}`);
-else {
-  origins.push('https://loomo.app');
-}
-
-// SESSION
-const SequelizeStore = connectSessionSequelize(session.Store);
-const store = new SequelizeStore({ db: models.sequelize });
-store.sync();
+app.disable('x-powered-by');
 
 // HELPERS
 function asyncHandler(callback) {
@@ -66,6 +56,13 @@ passport.deserializeUser(async (id, done) => {
   }
 });
 
+// STATIC
+app.use(express.static('static'));
+
+// SESSION
+const SequelizeStore = connectSessionSequelize(session.Store);
+const store = new SequelizeStore({ db: models.sequelize });
+store.sync();
 app.use(session({
   name: 'bloomo-auth',
   secret: process.env.SESSION_SECRET,
@@ -73,29 +70,41 @@ app.use(session({
   cookie: {
     sameSite: process.env.NODE_ENV === 'production' ? 'strict' : 'none',
     httpOnly: false,
-    secure: ['staging', 'production'].includes(process.env.NODE_ENV),
+    secure: false,
     maxAge: 7 * 24 * 60 * 60 * 1000,
   },
   resave: false,
   saveUninitialized: false,
 }));
-app.disable('x-powered-by');
+
+// JSON
 app.use(bodyParser.json());
-app.use((req, res, next) => {
-  res.set('Cache-Control', 'no-store');
-  next();
-});
-app.use(express.raw({ limit: '200MB' }));
+
+// PASSPORT
 app.use(passport.initialize());
 app.use(passport.session());
+
+// CORS
+const origins = [];
+if (process.env.NODE_ENV !== 'production') origins.push('http://localhost:8080');
+else {
+  origins.push('https://bloomo.app');
+}
 app.use(cors({
   origin: origins,
   credentials: true,
 }));
 
-// static
-app.use(express.static('static'));
+// NO CACHING
+app.use((req, res, next) => {
+  res.set('Cache-Control', 'no-store');
+  next();
+});
+
+// RAW
+app.use(express.raw({ limit: '200MB' }));
 
+// AUTH ROUTES
 const authRouter = express.Router();
 
 authRouter.post(
@@ -118,6 +127,7 @@ authRouter.post(
   },
 );
 
+// REGULAR ROUTES
 const regularRouter = express.Router();
 
 regularRouter.get('/user/current', asyncHandler(async (req, res) => {
